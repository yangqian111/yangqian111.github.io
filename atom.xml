<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ppsheep</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ppsheep.com/"/>
  <updated>2017-05-15T09:20:14.000Z</updated>
  <id>http://ppsheep.com/</id>
  
  <author>
    <name>ppsheep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pod静态库的创建(共享源码并上传pod公共库)</title>
    <link href="http://ppsheep.com/2017/05/15/public-static-library/"/>
    <id>http://ppsheep.com/2017/05/15/public-static-library/</id>
    <published>2017-05-15T07:50:39.000Z</published>
    <updated>2017-05-15T09:20:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>上面一篇文章讲了怎样创建我们自己的私有仓库，并且不公开自己的源码，今天我们来讲讲，公开源码的静态库创建方式，并且我们将还要上传到pod公共库</p>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先，我们到GitHub创建一个仓库，用来作我们的共享仓库</p>
<p>然后clone到本地，这里我创建的是一个叫做PPSPublicStaticLibrary的仓库，并且我已经clone到本地</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>和我们之前创建静态仓库一样，通过pod官方提供的模板创建一个静态仓库，单独建一个文件夹，将这个静态仓库先放在这个文件夹中</p>
<p>具体怎么创建，我就不讲了，可以看我之前的创建私有仓库的那篇文章，使用命令创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create</div></pre></td></tr></table></figure>
<p>工程创建好之后，工程目录是这样的</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/ib191.jpg" alt=""></p>
<p>接下来，我们将工程中的一些文件拷贝到我们之前clone下来的文件夹内</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/1fdy8.jpg" alt=""></p>
<p>将选中的文件拷贝到我们clone下来的PPSPublicStaticLibrary文件夹</p>
<h3 id="podspec"><a href="#podspec" class="headerlink" title="podspec"></a>podspec</h3><p>同样的我们还是编写podspec文件，首先我们先将example工程install一下，这个通过Pod install一下，我就不详细讲了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;PPSPublicStaticLibrary&apos;</div><div class="line">  s.version          = &apos;0.1.0&apos;</div><div class="line">  s.summary          = &apos;A example to show how to create a public static library&apos;</div><div class="line"></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">演示了如何来创建一个pod共享库，并且上传到pod公共仓库上，这个仓库没有其他什么代码，完全作演示使用.</div><div class="line">Demonstrates how to create a pod shared library and upload it to the pod public repository, which does not have any other code to be used for demonstration purposes.</div><div class="line">                       DESC</div><div class="line"></div><div class="line">  s.homepage         = &apos;https://github.com/yangqian111/PPSPublicStaticLibrary&apos;</div><div class="line"></div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line"></div><div class="line">  s.author           = &#123; &apos;ppsheep&apos; =&gt; &apos;ppsheep.qian@gmail.com&apos; &#125;</div><div class="line"></div><div class="line">  s.source           = &#123; :git =&gt; &apos;https://github.com/yangqian111/PPSPublicStaticLibrary.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line"></div><div class="line">  s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">  s.source_files = &apos;PPSPublicStaticLibrary/Classes/**/*&apos;</div><div class="line"></div><div class="line">  s.public_header_files = &apos;PPSPublicStaticLibrary/Classes/**/*.h&apos;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>上面是podspec文件，接下来，我们同样来创建一个测试的文件，方法，在classes下，新建一个cocoa，PPSPublicTest</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/dbmhm.jpg" alt=""></p>
<p>然后，我们先在测试工程中，测试一下，工程是否能够跑通，修改了pod文件，不要忘了install一下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;PPSPublicStaticLibrary/PPSPublicTest.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PPSAppDelegate</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</div><div class="line">&#123;</div><div class="line">    PPSPublicTest *test = [[PPSPublicTest alloc] init];</div><div class="line">    [test publicTest];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>经测试，能够正确运行，接下来，我们就需要提交代码了</p>
<p>提交代码之前，我们需要做几件事，首先使用pod lib lint 检查一下当前的库是否有错误，进入到工程目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/a59er.jpg" alt=""></p>
<p>接下来，将代码push到我们的git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;init message&quot;</div><div class="line">git push</div></pre></td></tr></table></figure>
<p>还需要对当前的静态库打一个tag，相当于release一个版本吧</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/5elyj.jpg" alt=""></p>
<p>我们打了一个0.1.0的tag</p>
<p>这样，我们就将本地需要做的工作做完了，</p>
<p>然后将我们的tag push到仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --tag</div></pre></td></tr></table></figure>
<p>这样，我们已经能够在我们的仓库中看到我们的代码，和创建的tag</p>
<h3 id="提交到pod仓库"><a href="#提交到pod仓库" class="headerlink" title="提交到pod仓库"></a>提交到pod仓库</h3><h5 id="注册pod账号"><a href="#注册pod账号" class="headerlink" title="注册pod账号"></a>注册pod账号</h5><p>如果之前没有提交过pod仓库，那么需要注册一个账号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register 邮箱地址 &apos;用户名&apos; --verbose</div></pre></td></tr></table></figure>
<p>在邮箱中，会收到一封邮件，激活，然后回到我们的命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk me</div></pre></td></tr></table></figure>
<p>就能够看到我们的详细信息</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/6gt97.jpg" alt=""></p>
<p>然后我们执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push PPSPublicStaticLibrary.podspec</div></pre></td></tr></table></figure>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/6ssps.jpg" alt=""></p>
<p>这样，我们的PPSPublicStaticLibrary就已经发布成功了</p>
<p>我们去搜索一下试试看</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/2ycf5.jpg" alt=""></p>
<p>能够搜到，成功</p>
<p>在其他工程中，集成通过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;PPSPublicStaticLibrary&apos;, &apos;~&gt; 0.1.0&apos;</div></pre></td></tr></table></figure>
<p>源工程地址：</p>
<p><a href="https://github.com/yangqian111/PPSPublicStaticLibrary" target="_blank" rel="external">https://github.com/yangqian111/PPSPublicStaticLibrary</a></p>
<p><strong>欢迎关注微博：ppsheep_Qian</strong></p>
<p><a href="http://weibo.com/ppsheep" target="_blank" rel="external">http://weibo.com/ppsheep</a></p>
<p><strong>欢迎关注公众号</strong></p>
<p><img src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上面一篇文章讲了怎样创建我们自己的私有仓库，并且不公开自己的源码，今天我们来讲讲，公开源码的静态库创建方式，并且我们将还要上传到pod公共库&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件化" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="静态库创建" scheme="http://ppsheep.com/all-tags/%E9%9D%99%E6%80%81%E5%BA%93%E5%88%9B%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>用CocoaPod创建私有的静态库(不公开源码)</title>
    <link href="http://ppsheep.com/2017/05/11/private-static-library/"/>
    <id>http://ppsheep.com/2017/05/11/private-static-library/</id>
    <published>2017-05-11T07:53:52.000Z</published>
    <updated>2017-05-11T09:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天将手上的SDK加入了通过CocoaPod集成，但是没有上到pod的官方库，是公司内部的私有库，现在组件化很火，相信很多公司稍微大一些的项目都会有这个需求，现在我们就来讲讲怎么加入pod的集成方式，这里我就把github当做我的私有仓库了</p>
<a id="more"></a>
<p>pod环境我就不讲怎么集成了，如果还没集成的同学，请移步</p>
<p><a href="http://ppsheep.com/2015/11/20/CocoaPods的安装/">http://ppsheep.com/2015/11/20/CocoaPods的安装/</a></p>
<h3 id="pod-lib-create"><a href="#pod-lib-create" class="headerlink" title="pod lib create"></a>pod lib create</h3><p>这里我们通过pod官方提供的模板来创建，我目前也是这样创建的，当然xcode也提供了创建静态库的方式，这个我就不讲了，感兴趣的同学可以Google一下</p>
<p>首先进入到我们想要存放工程的地方 通过命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create PPSPrivateStaticLibrary</div></pre></td></tr></table></figure>
<p>这里我将我的静态库取名为<strong>PPSPrivateStaticLibrary</strong></p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/mfycu.jpg" alt=""></p>
<p>这里开始创建的时候我们会填几个问题：</p>
<blockquote>
<ol>
<li><p>What language do you want to use?? [ Swift / ObjC ] //选择你要创建的静态库的语言</p>
</li>
<li><p>Would you like to include a demo application with your library? [ Yes / No ] //是否需要创建一个demo用来测试你的静态库</p>
</li>
<li><p>Which testing frameworks will you use? [ Specta / Kiwi / None ] //使用哪种测试框架来进行测试</p>
</li>
<li><p>Would you like to do view based testing? [ Yes / No ] //是否要做基础的视图测试</p>
</li>
<li><p>What is your class prefix? //文件前缀</p>
</li>
</ol>
</blockquote>
<p>下面是我选择的</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/t5pg5.jpg" alt=""></p>
<p>创建完成过后，我们的工程会自动打开，创建完成后，工程的目录如下</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/adgaj.jpg" alt=""></p>
<p>接下来我们主要编辑的是podspec文件，首先我们来看一下，我编写的SDK中的测试文件结构</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/oqz3e.jpg" alt=""></p>
<p>我想要公开上面文件中的PPSPublic1和PPSPublic2的头文件，其他的全部不公开出来，那我们怎样编写podspec文件呢</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;PPSPrivateStaticLibrary&apos;</div><div class="line">  s.version          = &apos;0.1.0&apos;</div><div class="line"></div><div class="line">#这里加上你的工程简介</div><div class="line">  s.summary          = &apos;This is ppsheep‘s test&apos;</div><div class="line"></div><div class="line">#这里加上你的工程简介</div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">这是我的一个测试工程，用来演示怎样创建一个源码不公开的静态库</div><div class="line">                       DESC</div><div class="line"></div><div class="line">#项目主页，这里可以放上你的静态库的介绍网页</div><div class="line">  s.homepage         = &apos;https://github.com/yangqian111/PPSPrivateStaticLibrary&apos;</div><div class="line"></div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line"></div><div class="line">  s.author           = &#123; &apos;ppsheep&apos; =&gt; &apos;ppsheep.qian@gmail.com&apos; &#125;</div><div class="line"></div><div class="line">  s.source           = &#123; :git =&gt; &apos;/Users/yangqian/Desktop/demo/PPSPrivateStaticLibrary&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line">#最低iOS系统要求</div><div class="line">  s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">#是否需要项目支持ARC</div><div class="line">  s.requires_arc = true</div><div class="line"></div><div class="line">#这个地方注意下，你在工程中要用到的framework,都需要在这里声明，我只是这里列举了几个</div><div class="line">s.frameworks = &apos;SystemConfiguration&apos;, &apos;MobileCoreServices&apos;, &apos;CoreGraphics&apos;, &apos;Security&apos;, &apos;CoreTelephony&apos;</div><div class="line"></div><div class="line">#在项目中我们还会用到一些library，也需要在这里声明，比如sqllite等tbd结尾的</div><div class="line">s.libraries = &apos;resolv&apos;</div><div class="line"></div><div class="line">#这里声明的存放源文件的地址，就是我们实际写的代码</div><div class="line">  s.source_files = &apos;PPSPrivateStaticLibrary/Classes/**/*&apos;</div><div class="line"></div><div class="line">#这里可以用来存放你的资源文件，图片，证书等等</div><div class="line">  # s.resource_bundles = &#123;</div><div class="line">  #   &apos;PPSPrivateStaticLibrary&apos; =&gt; [&apos;PPSPrivateStaticLibrary/Assets/*.png&apos;]</div><div class="line">  # &#125;</div><div class="line"></div><div class="line">#这里声明你需要公开的文件, 有几种声明方式，通配符也支持的，在这里我可以使用通配符PPSPrivateStaticLibrary/Classes/Public/*.h</div><div class="line"></div><div class="line">  s.public_header_files = &apos;PPSPrivateStaticLibrary/Classes/Public/*.h&apos;</div><div class="line">#也可以一个一个写出来[]</div><div class="line">#s.public_header_files = [&apos;PPSPrivateStaticLibrary/Classes/Public/PPSPublic1.h&apos;,</div><div class="line">#                          &apos;PPSPrivateStaticLibrary/Classes/Public/PPSPublic2.h&apos;]</div><div class="line"></div><div class="line">#这里可以声明你的静态库依赖的其他静态库</div><div class="line">  # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>上面的都写好了，接下来，我们测试一下，首先进入到刚才目录中创建的example文件夹install一下工程</p>
<p>然后，我们就可以在例子中引入两个公开的文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"PPSAppDelegate.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;PPSPrivateStaticLibrary/PPSPublic1.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;PPSPrivateStaticLibrary/PPSPublic2.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PPSAppDelegate</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</div><div class="line">&#123;</div><div class="line">    PPSPublic1 *p1 = [[PPSPublic1 alloc] init];</div><div class="line">    [p1 public1];</div><div class="line">    PPSPublic2 *p2 = [[PPSPublic2 alloc] init];</div><div class="line">    [p2 public2];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>能够正常调用，我们的例子程序已经能够正常调用SDK，然后我们还需要检查一下我们的pod库是否符合pod规则，也是通过命令行来检测，进入到我们的工程目录,使用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/ku2wn.jpg" alt=""></p>
<p>可能会遇到这个问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[!] The validator for Swift projects uses Swift 3.0 by default, if you are using a different version of swift you can use a `.swift-version` file to set the version for your Pod. For example to use Swift 2.3, run: </div><div class="line">    `echo &quot;2.3&quot; &gt; .swift-version`.</div><div class="line">You can use the `--no-clean` option to inspect any issue.</div></pre></td></tr></table></figure>
<p>因为我之前已经全局设置过了，所以这次没遇到这个问题，如果遇到了这个问题，在命令行执行以下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;3.0&quot; &gt; .swift-version</div></pre></td></tr></table></figure>
<p>就可以解决了</p>
<p>其中可能还会遇到其他问题，这个就要具体情况具体分析了</p>
<p>验证我们通过了，接下来，就需要打包了，pod可以打成两种形式的包，一种framework，还有一种是.a的library，这里我使用的是framework</p>
<p>也是通过命令行来执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod package PPSPrivateStaticLibrary.podspec --force</div></pre></td></tr></table></figure>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/d233u.jpg" alt=""></p>
<p>这里，遇到了问题，因为我们还未将源码提交到git本地仓库，tag也未打，所以报错了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -a -m &apos;0.1.0&apos;</div><div class="line">git tag -a 0.1.0 -m &apos;0.1.0&apos;</div></pre></td></tr></table></figure>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/7vrfl.jpg" alt=""></p>
<p>再次执行</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/bu6nz.jpg" alt=""></p>
<p>已经成功执行了</p>
<p>我们到工程目录下去找</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/kgxd3.jpg" alt=""></p>
<p>好了已经有了我们想要的framework，如果不放心framework是否支持所有的架构，我们可以检测一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lipo -info</div></pre></td></tr></table></figure>
<p>注意这里不是将framework文件夹拿来检查，而是文件夹下面的二进制文件</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/lndwz.jpg" alt=""></p>
<p>可以看到，包含了所有的架构</p>
<h3 id="上传到私有仓库"><a href="#上传到私有仓库" class="headerlink" title="上传到私有仓库"></a>上传到私有仓库</h3><p>在我们生成的文件夹中，我们需要用到的两个文件，一个是framework，还有一个就是PPSPrivateStaticLibrary.podspec文件</p>
<p>在上传之前，我们还需要修改一下podspec文件其中的一个地方</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//将  s.source修改成我们的私有仓库的地址</div><div class="line">  s.source = &#123; :git =&gt; &apos;https://github.com/yangqian111/PPSPrivateStaticLibrary.git&apos;, :tag =&gt; s.version.to_s&#125;</div><div class="line">//将s.ios.vendored_framework前的ios文件夹去掉</div><div class="line">s.ios.vendored_framework   = &apos;PPSPrivateStaticLibrary.framework&apos;</div></pre></td></tr></table></figure>
<p>然后将framework和PPSPrivateStaticLibrary全部上传到我们的私有仓库</p>
<p>接下来我们就可以集成我们的pod库了</p>
<p>新建一个工程，在Podfile中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">workspace ‘Test.xcworkspace&apos;</div><div class="line"></div><div class="line">project ‘Test.xcodeproj&apos;</div><div class="line"></div><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line"></div><div class="line">target &apos;Test&apos; do</div><div class="line"></div><div class="line">pod &apos;PPSPrivateStaticLibrary&apos;,:git=&gt;&apos;https://github.com/yangqian111/PPSPrivateStaticLibrary.git&apos;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>其中地址，写我们的私有仓库地址</p>
<p>这样就能顺利集成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#import &lt;PPSPrivateStaticLibrary/PPSPublic1.h&gt;</div><div class="line">#import &lt;PPSPrivateStaticLibrary/PPSPublic2.h&gt;</div><div class="line"></div><div class="line">@interface AppDelegate ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation AppDelegate</div><div class="line"></div><div class="line"></div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    PPSPublic1 *p1 = [[PPSPublic1 alloc] init];</div><div class="line">    [p1 public1];</div><div class="line">    PPSPublic2 *p2 = [[PPSPublic2 alloc] init];</div><div class="line">    [p2 public2];</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这只能算是一个初步集成，还有很多能做，比如我还想要集成其他的第三方公开库，或者我还要集成其他的第三方私有库，这些，我在后面如果会用到，都会分享出来</p>
<p>源码这些我都放在了github上</p>
<p><a href="https://github.com/yangqian111/PPSPrivateStaticLibrary" target="_blank" rel="external">https://github.com/yangqian111/PPSPrivateStaticLibrary</a></p>
<p><strong>欢迎关注微博：ppsheep_Qian</strong></p>
<p><a href="http://weibo.com/ppsheep" target="_blank" rel="external">http://weibo.com/ppsheep</a></p>
<p><strong>欢迎关注公众号</strong></p>
<p><img src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天将手上的SDK加入了通过CocoaPod集成，但是没有上到pod的官方库，是公司内部的私有库，现在组件化很火，相信很多公司稍微大一些的项目都会有这个需求，现在我们就来讲讲怎么加入pod的集成方式，这里我就把github当做我的私有仓库了&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件化" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="静态库创建" scheme="http://ppsheep.com/all-tags/%E9%9D%99%E6%80%81%E5%BA%93%E5%88%9B%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>谈谈ARC的本质和实现</title>
    <link href="http://ppsheep.com/2017/05/10/ARC/"/>
    <id>http://ppsheep.com/2017/05/10/ARC/</id>
    <published>2017-05-10T01:43:03.000Z</published>
    <updated>2017-05-10T02:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从在iOS 5.0苹果推出ARC以来，现在ARC基本成为了每个项目的标配，除开一下特别老的项目还在使用MRC，换句话说，如果你手上的项目还在使用MRC，那么你可看看外面的世界了(赶快跳)。</p>
<a id="more"></a>
<p><strong>欢迎关注微博：ppsheep_Qian</strong></p>
<p><a href="http://weibo.com/ppsheep" target="_blank" rel="external">http://weibo.com/ppsheep</a></p>
<p><strong>欢迎关注公众号</strong></p>
<p><img src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从在iOS 5.0苹果推出ARC以来，现在ARC基本成为了每个项目的标配，除开一下特别老的项目还在使用MRC，换句话说，如果你手上的项目还在使用MRC，那么你可看看外面的世界了(赶快跳)。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS进阶" scheme="http://ppsheep.com/all-categories/iOS%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="ARC" scheme="http://ppsheep.com/all-tags/ARC/"/>
    
  </entry>
  
  <entry>
    <title>EasyNetwork--精简的网络封装 不依赖第三方库</title>
    <link href="http://ppsheep.com/2017/04/28/EasyNetwork/"/>
    <id>http://ppsheep.com/2017/04/28/EasyNetwork/</id>
    <published>2017-04-28T07:22:36.000Z</published>
    <updated>2017-04-28T09:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>正在维护两个SDK，两个SDK中均需要进行网络请求，但是从业务方了解到，他们不希望每次集成一个SDK，就是集成了一个大的网络库，代码量急剧上升，所以在考虑自己在SDK中封装一套网络库，精简可用，不需要引入第三方的代码，也能够大大缩减SDK的体积</p>
<a id="more"></a>
<blockquote>
<p>本篇文章思路来源于 <a href="http://szulctomasz.com/how-do-I-build-a-network-layer/" target="_blank" rel="external">http://szulctomasz.com/how-do-I-build-a-network-layer/</a> 非常感谢Tomasz Szulc的分享</p>
</blockquote>
<p>我们一步一步来实现这个网络框架，首先，我需要一个request类，来保存我每次请求的参数、请求方法、请求的API等等</p>
<h3 id="APIRequets"><a href="#APIRequets" class="headerlink" title="APIRequets"></a>APIRequets</h3><p>之前看到的很多这种request，都是有一个基类，然后每个request是子类，重写父类的一些方法，这里我是通过协议来实现</p>
<h5 id="BaseAPIRequest"><a href="#BaseAPIRequest" class="headerlink" title="BaseAPIRequest"></a>BaseAPIRequest</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BaseAPIRequest</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> api: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">var</span> method: <span class="type">NetworkService</span>.<span class="type">Method</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">var</span> query: <span class="type">NetworkService</span>.<span class="type">QueryType</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">var</span> params: [<span class="type">String</span> : <span class="type">Any</span>]? &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">var</span> headers: [<span class="type">String</span> : <span class="type">String</span>]? &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseAPIRequest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">///默认返回json</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">defaultJsonHeader</span><span class="params">()</span></span> -&gt; [<span class="type">String</span> : <span class="type">String</span>] &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="string">"Content-Type"</span> : <span class="string">"application/json"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>协议包含了我们普通请求的所需要的参数、请求地址、请求方法、请求类型和请求头，并且还有一个扩展，默认请求类型是json</p>
<p>关于请求方法和请求类型的枚举类型，后面我们会讲到</p>
<p>有一个登录请求request，他实现了BaseAPIRequest</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SignInRequest</span>: <span class="title">BaseAPIRequest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userName: <span class="type">String</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> password: <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(userName: <span class="type">String</span>, password: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.userName = userName</div><div class="line">        <span class="keyword">self</span>.password = password</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> method: <span class="type">NetworkService</span>.<span class="type">Method</span> &#123;</div><div class="line">        <span class="keyword">return</span> .post</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> query: <span class="type">NetworkService</span>.<span class="type">QueryType</span> &#123;</div><div class="line">        <span class="keyword">return</span> .json</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> params: [<span class="type">String</span> : <span class="type">Any</span>]? &#123;</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">            <span class="string">"username"</span> : userName,</div><div class="line">            <span class="string">"password"</span> : password</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> api: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"/sign_in"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> headers: [<span class="type">String</span> : <span class="type">String</span>]? &#123;</div><div class="line">        <span class="keyword">return</span> defaultJsonHeader()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们每个请求的所需要的参数，都封装在了一个request对象当中，接下来要考虑的是怎样发起这个网络请求，最终采取的方案是，通过NSOperation和NSOperationQueue来实现网络请求的发起</p>
<p>这里用到了自定义operation，如果对这一块不太了解的同学，可以看看我之前的一篇文章</p>
<p><a href="http://ppsheep.com/2017/03/14/Operation-Queues并发编程/">http://ppsheep.com/2017/03/14/Operation-Queues并发编程/</a></p>
<h3 id="Operation发起网络请求"><a href="#Operation发起网络请求" class="headerlink" title="Operation发起网络请求"></a>Operation发起网络请求</h3><p>自定义一个可并发的operation</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkOperation</span>: <span class="title">Operation</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _isReady: <span class="type">Bool</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">var</span> isReady: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _isReady &#125;</div><div class="line">        <span class="keyword">set</span> &#123; update(</div><div class="line">            &#123; <span class="keyword">self</span>._isReady = newValue &#125;, key: <span class="string">"isReady"</span>) &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _isExecuting: <span class="type">Bool</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">var</span> isExecuting: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _isExecuting &#125;</div><div class="line">        <span class="keyword">set</span> &#123; update(&#123; <span class="keyword">self</span>._isExecuting = newValue &#125;, key: <span class="string">"isExecuting"</span>) &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _isFinished: <span class="type">Bool</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">var</span> isFinished: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _isFinished &#125;</div><div class="line">        <span class="keyword">set</span> &#123; update(&#123; <span class="keyword">self</span>._isFinished = newValue &#125;, key: <span class="string">"isFinished"</span>) &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _isCancelled: <span class="type">Bool</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">var</span> isCancelled: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _isCancelled &#125;</div><div class="line">        <span class="keyword">set</span> &#123; update(&#123; <span class="keyword">self</span>._isCancelled = newValue &#125;, key: <span class="string">"isCancelled"</span>) &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(<span class="number">_</span> change: <span class="params">(Void)</span></span></span> -&gt; <span class="type">Void</span>, key: <span class="type">String</span>) &#123;</div><div class="line">        willChangeValue(forKey: key)</div><div class="line">        change()</div><div class="line">        didChangeValue(forKey: key)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        _isReady = <span class="literal">true</span></div><div class="line">        _isExecuting = <span class="literal">false</span></div><div class="line">        _isFinished = <span class="literal">false</span></div><div class="line">        _isCancelled = <span class="literal">false</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        name = <span class="string">"Network Operation"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">var</span> isAsynchronous: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isExecuting == <span class="literal">false</span> &#123;</div><div class="line">            <span class="keyword">self</span>.isReady = <span class="literal">false</span></div><div class="line">            <span class="keyword">self</span>.isExecuting = <span class="literal">true</span></div><div class="line">            <span class="keyword">self</span>.isFinished = <span class="literal">false</span></div><div class="line">            <span class="keyword">self</span>.isCancelled = <span class="literal">false</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(self.name!) operation started."</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/// Used only by subclasses. Externally you should use `cancel`.</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finish</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(self.name!) operation finished."</span>)</div><div class="line">        <span class="keyword">self</span>.isExecuting = <span class="literal">false</span></div><div class="line">        <span class="keyword">self</span>.isFinished = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(self.name!) operation cancelled."</span>)</div><div class="line">        <span class="keyword">self</span>.isExecuting = <span class="literal">false</span></div><div class="line">        <span class="keyword">self</span>.isCancelled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ServiceOperation是NetworkOperation的一个子类，在其中加入了网络请求入口EasyNetworkService，并且将取消请求的方法定义设置</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceOperation</span>: <span class="title">NetworkOperation</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> service: <span class="type">EasyNetworkService</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">self</span>.service = <span class="type">EasyNetworkService</span>(<span class="type">HostConfiguration</span>.shared)</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</div><div class="line">        service.cancle()</div><div class="line">        <span class="keyword">super</span>.cancel()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我每个请求的operation，都继承自ServiceOperation，在每个请求发起的时候，将这个operation添加到队列当中即可</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignInOperation</span>: <span class="title">ServiceOperation</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> request: <span class="type">SignInRequest</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> success: ((<span class="type">SignInItem</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> failure: ((<span class="type">NSError</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(userName: <span class="type">String</span>, password: <span class="type">String</span>) &#123;</div><div class="line">        request = <span class="type">SignInRequest</span>(userName: userName, password: password)</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.start()</div><div class="line">        service.request(request, success: handleSuccess, failure: handleFailure)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handleSuccess</span><span class="params">(<span class="number">_</span> response: AnyObject?)</span></span> &#123;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">let</span> item = <span class="keyword">try</span> <span class="type">SignInResponseMapper</span>.process(response)</div><div class="line">            <span class="keyword">self</span>.success?(item)</div><div class="line">            <span class="keyword">self</span>.finish()</div><div class="line">        &#125; <span class="keyword">catch</span> &#123;</div><div class="line">            handleFailure(<span class="type">NSError</span>.cannotParseResponse())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handleFailure</span><span class="params">(<span class="number">_</span> error: NSError)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.failure?(error)</div><div class="line">        <span class="keyword">self</span>.finish()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的登录请求operation中，有成功的回调和失败的回调，其中还涉及到了将返回的数据转成一个model，后面我们也是会讲到的</p>
<p>operation已经定义好，我们还需要一个operationQueue来执行我们的operation</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkQueue</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> shared = <span class="type">NetworkQueue</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> queue = <span class="type">OperationQueue</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addOperation</span><span class="params">(<span class="number">_</span> op: Operation)</span></span> &#123;</div><div class="line">        queue.addOperation(op)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们对外需要暴露的接口基本上已经实现完成，现在如果我要发起一次请求，就是这样一种方式</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> signInOperation = <span class="type">SignInOperation</span>(userName: <span class="string">"userName"</span>, password: <span class="string">"password"</span>)</div><div class="line">signInOperation.success = &#123; item <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"User id is \(item.userName)"</span>) &#125;</div><div class="line">signInOperation.failure = &#123; error <span class="keyword">in</span> <span class="built_in">print</span>(error.localizedDescription) &#125;</div><div class="line"><span class="type">NetworkQueue</span>.shared.addOperation(signInOperation)</div></pre></td></tr></table></figure>
<p>好像还缺点什么，好像还没有baseURL的定义，加一个，定义baseURL</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HostConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> baseURL: <span class="type">URL</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(baseURL: <span class="type">URL</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.baseURL = baseURL</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> shared: <span class="type">HostConfiguration</span>!</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">baseURL</span>(<span class="title">_</span> <span class="title">urlString</span>: <span class="title">String</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> url = <span class="type">URL</span>(string: urlString)!</div><div class="line">        <span class="type">HostConfiguration</span>.shared = <span class="type">HostConfiguration</span>(baseURL: url)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我们启动之后，将baseURL设置进去就行</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">HostConfiguration</span>.baseURL(<span class="string">"http://"</span>)<span class="comment">//设置baseURL</span></div></pre></td></tr></table></figure>
<p>接下来，我们就来实现内部的网络请求，真正的网络请求发送，我们使用的是apple提供的URLSession框架</p>
<p>我们发起网络请求，到达最后的地方，是在operation的start方法中，调用了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.start()</div><div class="line">        service.request(request, success: handleSuccess, failure: handleFailure)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个service是一个EasyNetworkService，它内部实现了完整URL的拼接，header的设置，在它内部实现了具体的请求调用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">let</span> <span class="type">DidPerformUnauthorizedOperation</span> = <span class="string">"DidPerformUnauthorizedOperation"</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EasyNetworkService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> conf: <span class="type">HostConfiguration</span> <span class="comment">//</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> service = <span class="type">NetworkService</span>()<span class="comment">//发请求的网络服务类</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> conf: <span class="type">HostConfiguration</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.conf = conf</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(<span class="number">_</span> request: BaseAPIRequest,</span></span></div><div class="line">                 success: <span class="params">(<span class="params">(AnyObject?)</span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>,</div><div class="line">                 failure: ((<span class="type">NSError</span>) -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>) &#123;</div><div class="line">        </div><div class="line">         <span class="keyword">let</span> url = conf.baseURL.appendingPathComponent(request.api)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> headers = request.headers</div><div class="line">        </div><div class="line">        service.makeRequest(<span class="keyword">for</span>: url, method: request.method, queryType: request.query, params: request.params, headers: headers, success: &#123; data <span class="keyword">in</span></div><div class="line">            <span class="keyword">var</span> json: <span class="type">AnyObject</span>? = <span class="literal">nil</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123;</div><div class="line">                json = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data <span class="keyword">as</span> <span class="type">Data</span>, options: []) <span class="keyword">as</span> <span class="type">AnyObject</span></div><div class="line">            &#125;</div><div class="line">            success?(json)</div><div class="line">        &#125;, failure: &#123; data, error, statusCode <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> statusCode == <span class="number">401</span> &#123;</div><div class="line">                <span class="comment">// Operation not authorized</span></div><div class="line">                <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="type">DidPerformUnauthorizedOperation</span>), object: <span class="literal">nil</span>)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123;</div><div class="line">                <span class="keyword">let</span> json = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data <span class="keyword">as</span> <span class="type">Data</span>, options: []) <span class="keyword">as</span> <span class="type">AnyObject</span></div><div class="line">                <span class="keyword">let</span> info = [</div><div class="line">                    <span class="type">NSLocalizedDescriptionKey</span>: json?[<span class="string">"error"</span>] <span class="keyword">as</span>? <span class="type">String</span> ?? <span class="string">""</span>,</div><div class="line">                    <span class="type">NSLocalizedFailureReasonErrorKey</span>: <span class="string">"Probably not allowed action."</span></div><div class="line">                ]</div><div class="line">                <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"EasyNetworkService"</span>, code: <span class="number">0</span>, userInfo: info)</div><div class="line">                failure?(error)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                failure?(error ?? <span class="type">NSError</span>(domain: <span class="string">"EasyNetworkService"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>))</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cancle</span><span class="params">()</span></span> &#123;</div><div class="line">        service.cancel()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的service中，又出现了一个NetworkService，这个service就是组装URLSession，进行网络请求的发出</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> task: <span class="type">URLSessionDataTask</span>?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> successCodes: <span class="type">CountableRange</span>&lt;<span class="type">Int</span>&gt; = <span class="number">200</span>..&lt;<span class="number">299</span><span class="comment">//成功的code</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> failureCodes: <span class="type">CountableRange</span>&lt;<span class="type">Int</span>&gt; = <span class="number">400</span>..&lt;<span class="number">499</span><span class="comment">//错误的code</span></div><div class="line">    </div><div class="line">    <span class="comment">///HTTP METHOD</span></div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Method</span>: <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">get</span>, post, put, delete</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">QueryType</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> json, path</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeRequest</span><span class="params">(<span class="keyword">for</span> url: URL, method: Method, queryType: QueryType,</span></span></div><div class="line">                     params: [String : Any]? = <span class="literal">nil</span>,</div><div class="line">                     headers: [String : String]? = <span class="literal">nil</span>,</div><div class="line">                     success: <span class="params">(<span class="params">(Data?)</span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>,</div><div class="line">                     failure: ((<span class="number">_</span> data: <span class="type">Data</span>?, <span class="number">_</span> error: <span class="type">NSError</span>?, <span class="number">_</span> responseCode: <span class="type">Int</span>) -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">var</span> mutableRequest = makeQuery(<span class="keyword">for</span>: url, params: params, type: queryType)</div><div class="line">        </div><div class="line">        mutableRequest.allHTTPHeaderFields = headers</div><div class="line">        mutableRequest.httpMethod = method.rawValue</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">        </div><div class="line">        task = session.dataTask(with: mutableRequest, completionHandler: &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> httpResponse = response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span> <span class="keyword">else</span> &#123;</div><div class="line">                failure?(data, error <span class="keyword">as</span> <span class="type">NSError</span>?, <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</div><div class="line">                failure?(data, error <span class="keyword">as</span> <span class="type">NSError</span>?, <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.successCodes.<span class="built_in">contains</span>(httpResponse.statusCode) &#123;</div><div class="line">                success?(data)</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">self</span>.failureCodes.<span class="built_in">contains</span>(httpResponse.statusCode) &#123;</div><div class="line">                failure?(data, error <span class="keyword">as</span> <span class="type">NSError</span>?, httpResponse.statusCode)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">let</span> info = [</div><div class="line">                    <span class="type">NSLocalizedDescriptionKey</span>: <span class="string">"Request failed with code \(httpResponse.statusCode)"</span>,</div><div class="line">                    <span class="type">NSLocalizedFailureReasonErrorKey</span>: <span class="string">"Wrong handling logic, wrong endpoing mapping or EasyNetwork bug."</span></div><div class="line">                ]</div><div class="line">                <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"NetworkService"</span>, code: <span class="number">0</span>, userInfo: info)</div><div class="line">                failure?(data, error, httpResponse.statusCode)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        task?.resume()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</div><div class="line">        task?.cancel()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/// 创建request对象</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeQuery</span><span class="params">(<span class="keyword">for</span> url: URL, params: [String : Any]?, type: QueryType)</span></span> -&gt; <span class="type">URLRequest</span> &#123;</div><div class="line">        <span class="keyword">switch</span> type &#123;</div><div class="line">        <span class="comment">/// 通过httpBody传参</span></div><div class="line">        <span class="keyword">case</span> .json:</div><div class="line">            <span class="keyword">var</span> mutableRequest = <span class="type">URLRequest</span>(url: url, cachePolicy: .reloadIgnoringLocalAndRemoteCacheData, timeoutInterval: <span class="number">10.0</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> params = params &#123;</div><div class="line">                mutableRequest.httpBody = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.data(withJSONObject: params, options: [])</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> mutableRequest</div><div class="line">        <span class="comment">/// URL 尾部带上参数</span></div><div class="line">        <span class="keyword">case</span> .path:</div><div class="line">            <span class="keyword">var</span> query = <span class="string">""</span></div><div class="line">            params?.forEach(&#123; (key, value) <span class="keyword">in</span></div><div class="line">                query = query + <span class="string">"\(key)=\(value)&amp;"</span></div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">var</span> components = <span class="type">URLComponents</span>(url: url, resolvingAgainstBaseURL: <span class="literal">true</span>)!</div><div class="line">            components.query = query</div><div class="line">            <span class="keyword">return</span> <span class="type">URLRequest</span>(url: components.url!, cachePolicy: .reloadIgnoringLocalAndRemoteCacheData, timeoutInterval: <span class="number">10.0</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个service中，我们将所有的参数都收集起来，发出网络请求，使用的是datatask，当然这只是其中一种方式，可以扩展下载，上传等等网络请求</p>
<p>这样，整个一个网络请求的流程就讲完了，上面我们还讲到了要将返回的参数转成一个model，在调用处，我们实际接收到的是一个struct对象，这个转化的过程，我们放在了operation中</p>
<p>在operation的处理成功请求的时候，有一行代码是这样的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> item = <span class="keyword">try</span> <span class="type">SignInResponseMapper</span>.process(response)</div></pre></td></tr></table></figure>
<p>这其实就是将返回的数据转化成我们需要的model</p>
<p>这里，做了两种映射，一种是单个的json对象，一个是解析一个json对象数组</p>
<p>单个解析：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ResponseMapperProtocol</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">Item</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> obj: AnyObject?)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Item</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResponseMapperError</span>: <span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> invalid</div><div class="line">    <span class="keyword">case</span> missingAttribute</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseMapper</span>&lt;<span class="title">A</span>: <span class="title">ParsedItem</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> obj: AnyObject?, parse: <span class="params">(<span class="number">_</span> json: [String: AnyObject])</span></span></span> -&gt; <span class="type">A</span>?) <span class="keyword">throws</span> -&gt; <span class="type">A</span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> json = obj <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>] <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">ResponseMapperError</span>.invalid &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> item = parse(json) &#123;</div><div class="line">            <span class="keyword">return</span> item</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">ResponseMapperError</span>.missingAttribute</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析登录返回的数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SignInResponseMapper</span>: <span class="title">ResponseMapper</span>&lt;<span class="title">SignInItem</span>&gt;, <span class="title">ResponseMapperProtocol</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> obj: AnyObject?)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">SignInItem</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">try</span> process(obj, parse: &#123; json <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> userName = json[<span class="string">"userName"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">            <span class="keyword">let</span> password = json[<span class="string">"password"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> userName = userName, <span class="keyword">let</span> password = password &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">SignInItem</span>(userName: userName, password: password)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析json数组对象：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayResponseMapper</span>&lt;<span class="title">A</span>: <span class="title">ParsedItem</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> obj: AnyObject?, mapper: <span class="params">(<span class="params">(Any?)</span></span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">A</span>)) <span class="keyword">throws</span> -&gt; [<span class="type">A</span>] &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> json = obj <span class="keyword">as</span>? [[<span class="type">String</span>: <span class="type">AnyObject</span>]] <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">ResponseMapperError</span>.invalid &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> items = [<span class="type">A</span>]()</div><div class="line">        <span class="keyword">for</span> jsonNode <span class="keyword">in</span> json &#123;</div><div class="line">            <span class="keyword">let</span> item = <span class="keyword">try</span> mapper(jsonNode)</div><div class="line">            items.append(item)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> items</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要使用解析数组的，将继承的类更改，调用ArrayResponseMapper的process即可</p>
<p>其他的代码，就不粘上来了，源码我上传到GitHub，关于这个框架，可扩展性很强，后期可以丰富很多进去，欢迎大家给我提issue</p>
<p>项目地址：<a href="https://github.com/yangqian111/EasyNetwork" target="_blank" rel="external">https://github.com/yangqian111/EasyNetwork</a></p>
<p><strong>欢迎关注微博：ppsheep_Qian</strong></p>
<p><a href="http://weibo.com/ppsheep" target="_blank" rel="external">http://weibo.com/ppsheep</a></p>
<p><strong>欢迎关注公众号</strong></p>
<p><img src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正在维护两个SDK，两个SDK中均需要进行网络请求，但是从业务方了解到，他们不希望每次集成一个SDK，就是集成了一个大的网络库，代码量急剧上升，所以在考虑自己在SDK中封装一套网络库，精简可用，不需要引入第三方的代码，也能够大大缩减SDK的体积&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://ppsheep.com/all-categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络库封装" scheme="http://ppsheep.com/all-tags/%E7%BD%91%E7%BB%9C%E5%BA%93%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>iOS类似于微信的ActionSheet</title>
    <link href="http://ppsheep.com/2017/04/13/ActionSheet-like-wechat/"/>
    <id>http://ppsheep.com/2017/04/13/ActionSheet-like-wechat/</id>
    <published>2017-04-13T06:08:15.000Z</published>
    <updated>2017-04-14T03:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前，这个ActionSheet是已经写过的，之前是因为觉得iOS9的ActionSheet有点看不大习惯，就自己写了一个简单的，之前还发过一篇介绍了一下，最近要用到这个ActionSheet，然后拿出来用，觉得之前写的还是比较粗糙，这里再重新加工一下</p>
<a id="more"></a>
<p>同样的，还是先看一下效果图</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/ppsheep/gk8a2.gif" alt=""></p>
<p>首先根据效果，我们可以分析一下，怎样来实现这样一个效果，其实无论什么UI效果，第一步都是先分析我们怎么样来实现这个，后面才是怎么样来将这个效果实现的更好，代码更清晰简洁，扩展性更高。</p>
<ul>
<li>首先，我们需要一个全遮罩的背景，在点击的时候需要将actionsheet隐藏掉</li>
<li>然后这个actionsheet，需要根据选项来生成，可以想到这选项是一个个的button，我看见有的实现里是将它做成一个tableview，我感觉是做麻烦了</li>
<li>另外一个就是点击回调了，这里我做了两种，一个是delegate回调，一个是block回调</li>
</ul>
<h4 id="回调的item"><a href="#回调的item" class="headerlink" title="回调的item"></a>回调的item</h4><p>很多实现的actionsheet，回调都是一个index的值，我之前实现的也是一个点击的索引，但是这样扩展起来比较麻烦，很有局限性，所以这次，我将回调做成了一个model，这个model里你可以自己定义一些属性，根据传入的参数，来自定义这个model，这样，扩展性稍微强一些</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PPSActionSheetItem</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;<span class="comment">//点击title</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> index;<span class="comment">//点击的index</span></div><div class="line"></div><div class="line">+ (PPSActionSheetItem *)itemWithTitle:(<span class="built_in">NSString</span> *)title index:(<span class="built_in">NSInteger</span>)index;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PPSActionSheetItem</span>()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;<span class="comment">//点击title</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> index;<span class="comment">//点击的index</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PPSActionSheetItem</span></span></div><div class="line"></div><div class="line">+ (PPSActionSheetItem *)itemWithTitle:(<span class="built_in">NSString</span> *)title index:(<span class="built_in">NSInteger</span>)index &#123;</div><div class="line">    PPSActionSheetItem *item = [[PPSActionSheetItem alloc] initWithTitle:title index:index];</div><div class="line">    <span class="keyword">return</span> item;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithTitle:(<span class="built_in">NSString</span> *)title index:(<span class="built_in">NSInteger</span>)index &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>) &#123;</div><div class="line">        _title = [title <span class="keyword">copy</span>];</div><div class="line">        _index = index;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="delegate-amp-amp-block"><a href="#delegate-amp-amp-block" class="headerlink" title="delegate &amp;&amp; block"></a>delegate &amp;&amp; block</h4><p>点击的回调，和之前没什么差别，只是回调的数据变成了item</p>
<h5 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h5><font color="red">在点击事件里面 回传actionsheet的目的  是因为在一个viewcontroller里面可能会有多个 actionsheet展现，在同一个VC里面就需要区分 是哪个actionsheet 来区分操作<br><br>不同的actionsheet当然可以使用tag来区分 当然也可以用其他的方法区分</font>

<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">PPSActionSheet</span>;</span></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">PPSActionSheetItem</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">PPSActionSheetClickedDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@required</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> 点击选项 实现这个代理必须实现这个方法 不然点击不能实现</div><div class="line"> </div><div class="line"> @param actionSheet 当前显示的actionsheet 如果存在多个actionsheet 可以分别出是哪一个actionsheet</div><div class="line"> @param item 点击的位置</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)actionSheet:(PPSActionSheet *)actionSheet clickedButtonAtIndex:(PPSActionSheetItem *)item;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h5 id="block"><a href="#block" class="headerlink" title="block"></a>block</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^ClickedCompleteBlock)(PPSActionSheetItem *item);</div></pre></td></tr></table></figure>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>在初始化的时候，提供了初始化方法,如果想使用block回调方式，直接将delegate置为nil就行</p>
<p>初始化方法的选项，采用的是传入可变参数的形式，这样，在初始化的时候，显得更简洁明了一些</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 创建实例，如果使用block,delegate直接传nil即可</div><div class="line"> </div><div class="line"> @param delegate    代理 一般为当前的VC</div><div class="line"> @param cancleTitle 取消的title 最下面的选项</div><div class="line"> @param otherTitles 其他的一些选项标题</div><div class="line"> </div><div class="line"> @return actionsheet</div><div class="line"> */</div><div class="line">- (<span class="keyword">instancetype</span>)initWithDelegate:(<span class="keyword">id</span>&lt;PPSActionSheetClickedDelegate&gt;)delegate</div><div class="line">                     cancleTitle:(<span class="built_in">NSString</span> *)cancleTitle</div><div class="line">                     otherTitles:(<span class="built_in">NSString</span> *)otherTitles,... <span class="built_in">NS_REQUIRES_NIL_TERMINATION</span>;</div></pre></td></tr></table></figure>
<h4 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h4><p>整个actionsheet是继承自UIView，我们之前说到的黑色遮罩，我将actionsheet的本身设置为一个全屏的view，给它加一个背景颜色效果，再alpha设置一下，就达到了效果。</p>
<p>然后选项的view，都将他们加到了actionsheet的一个子view sheetView中</p>
<p>在初始化的时候，首先将选项item，根据传入的参数生成</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> tag = <span class="number">0</span>;<span class="comment">//记录item的index值</span></div><div class="line">_items = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"><span class="comment">//首先添加取消按钮</span></div><div class="line">PPSActionSheetItem *cancleItem = [PPSActionSheetItem itemWithTitle:<span class="string">@"取消"</span> index:<span class="number">0</span>];</div><div class="line">[_items addObject:cancleItem];</div><div class="line">    </div><div class="line">tag ++;</div><div class="line">    </div><div class="line"><span class="built_in">NSString</span>* curStr;</div><div class="line">va_list list;</div><div class="line"><span class="keyword">if</span>(otherTitles)</div><div class="line">&#123;</div><div class="line">    PPSActionSheetItem *item = [PPSActionSheetItem itemWithTitle:otherTitles index:tag];</div><div class="line">    [_items addObject:item];</div><div class="line">    tag ++;</div><div class="line">    </div><div class="line">    va_start(list, otherTitles);</div><div class="line">    <span class="keyword">while</span> ((curStr = va_arg(list, <span class="built_in">NSString</span>*))) &#123;</div><div class="line">        PPSActionSheetItem *item = [PPSActionSheetItem itemWithTitle:curStr index:tag];</div><div class="line">        [_items addObject:item];</div><div class="line">        tag ++;</div><div class="line">    &#125;</div><div class="line">    va_end(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在选项item生成完成之后，我们需要计算一下sheetview的frame，然后就可以开始添加按钮到sheetview上了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> sheetViewF = _sheetView.frame;</div><div class="line">sheetViewF.size.height = BtnHeight * _items.count + CancleMargin;</div><div class="line">_sheetView.frame = sheetViewF;</div><div class="line"><span class="comment">//开始添加按钮</span></div><div class="line">[<span class="keyword">self</span> setupBtnWithTitles];</div></pre></td></tr></table></figure>
<p>在添加按钮的时候，将每个按钮计算一下frame，添加到sheetview上就行，实现起来都是不麻烦的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 创建每个选项</div><div class="line"> </div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setupBtnWithTitles &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (PPSActionSheetItem *item <span class="keyword">in</span> _items) &#123;</div><div class="line">        <span class="built_in">UIButton</span> *btn = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">if</span> (item.index == <span class="number">0</span>) &#123;<span class="comment">//取消按钮</span></div><div class="line">            btn = [[<span class="built_in">UIButton</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, _sheetView.frame.size.height - BtnHeight, PPSActionSheetScreenWidth, BtnHeight)];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            btn = [[<span class="built_in">UIButton</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, BtnHeight * (item.index - <span class="number">1</span>) , PPSActionSheetScreenWidth, BtnHeight)];</div><div class="line">            <span class="comment">// 最上面画分割线</span></div><div class="line">            <span class="built_in">UIView</span> *line = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, PPSActionSheetScreenWidth, <span class="number">0.5</span>)];</div><div class="line">            line.backgroundColor = PPSActionSheetSeparatorColor;</div><div class="line">            [btn addSubview:line];</div><div class="line">        &#125;</div><div class="line">        btn.tag = item.index;</div><div class="line">        [btn setBackgroundImage:PPSActionSheetNormalImage forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        [btn setBackgroundImage:PPSActionSheetHighImage forState:<span class="built_in">UIControlStateHighlighted</span>];</div><div class="line">        [btn setTitle:item.title forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        btn.titleLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"STHeitiSC-Light"</span> size:<span class="number">17</span>];</div><div class="line">        [btn setTitleColor:[<span class="built_in">UIColor</span> blackColor] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        [btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(sheetBtnClick:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">        [<span class="keyword">self</span>.sheetView addSubview:btn];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在使用的时候，可以通过block，也可使用delegate</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PPSActionSheet *sheet1 = [[PPSActionSheet alloc] initWithDelegate:<span class="literal">nil</span> cancleTitle:<span class="string">@"取消"</span> otherTitles:<span class="string">@"你好"</span>,<span class="string">@"我好"</span>, <span class="literal">nil</span>];</div><div class="line">sheet1.clickedCompleteBlock = ^(PPSActionSheetItem *item) &#123;</div><div class="line">    <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:item.title message:<span class="string">@"点击的item"</span> delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="string">@"OK"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>];</div><div class="line">    [alert show];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, item.title);</div><div class="line">&#125;;</div><div class="line">[sheet1 show];</div></pre></td></tr></table></figure>
<p>这个actionsheet还可以丰富很多，比如可以传入主标题，副标题之类的，还可以将它丰富成具体购买商品选择数量，或者几个选项的控制开关等等。<br>有这个想法，后面应该是先从主副标题开始吧</p>
<p>其他的也没什么要讲的了，这个actionsheet，也是在用到图片浏览器的时候，需要用到它，然后一看之前的写的有点丑，就稍微整理了一下，那个关于查看的图片的小工具，也会重新整理优化一下，那个图片查看器上还有一个下载的progress的小view，那个view我也准备拎出来单独成一个仓库，这些小的view都是可以优化很多，还能丰富很多，拎出来做个准备</p>
<p>源码我就放上去了：</p>
<p><a href="https://github.com/yangqian111/PPSActionSheet" target="_blank" rel="external">https://github.com/yangqian111/PPSActionSheet</a></p>
<p><strong>欢迎关注微博：ppsheep_Qian</strong></p>
<p><a href="http://weibo.com/ppsheep" target="_blank" rel="external">http://weibo.com/ppsheep</a></p>
<p><strong>欢迎关注公众号</strong></p>
<p><img src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前，这个ActionSheet是已经写过的，之前是因为觉得iOS9的ActionSheet有点看不大习惯，就自己写了一个简单的，之前还发过一篇介绍了一下，最近要用到这个ActionSheet，然后拿出来用，觉得之前写的还是比较粗糙，这里再重新加工一下&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/"/>
    
      <category term="UI小组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/UI%E5%B0%8F%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="ActionSheet" scheme="http://ppsheep.com/all-tags/ActionSheet/"/>
    
  </entry>
  
  <entry>
    <title>使用NSURLProtocol拦截APP内的网络请求</title>
    <link href="http://ppsheep.com/2017/04/10/NSURLProtocol-hook-network-request/"/>
    <id>http://ppsheep.com/2017/04/10/NSURLProtocol-hook-network-request/</id>
    <published>2017-04-10T07:21:51.000Z</published>
    <updated>2017-04-12T01:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>APP内的网络请求的监控，相信很多APP内都有这个模块，通过监控APP内的网络请求，观察各个API的稳定性。这些数据，一般我们都会先收集起来，在一段时间内，上传到服务器。在iOS中，出了WK的网络请求，其他的所有网络请求都可以通过NSURLProtocol来拦截监控，下面我们来实践一下。</p>
<a id="more"></a>
<p>首先，我们需要介绍一下，在iOS中苹果提供了NSURLConnection、NSURLSession等优秀的网路接口供我们来调用，开源社区也有很多的开源库，如之前的ASIHttpRequest 现在的AFNetworking和Alamofire，我们接下来介绍的NSURLProtocol，都可以监控到这些开源库的网络请求。</p>
<h3 id="NSURLProtocol"><a href="#NSURLProtocol" class="headerlink" title="NSURLProtocol"></a>NSURLProtocol</h3><p>NSURLProtocol是iOS网络加载系统中很强的一部分，它其实是一个抽象类，我们可以通过继承子类化来拦截APP中的网络请求。</p>
<p>举几个例子：</p>
<ul>
<li>我们的APP内的所有请求都需要增加公共的头，像这种我们就可以直接通过NSURLProtocol来实现，当然实现的方式有很多种</li>
<li>再比如我们需要将APP某个API进行一些访问的统计</li>
<li>再比如我们需要统计APP内的网络请求失败率</li>
</ul>
<p>等等，都可以用到</p>
<p>NSURLProtocol是一个抽象类，我们需要子类化才能实现网络请求拦截。</p>
<h3 id="子类化NSURLProtocol"><a href="#子类化NSURLProtocol" class="headerlink" title="子类化NSURLProtocol"></a>子类化NSURLProtocol</h3><p>在NSURLProtocol中，我们需要告诉它哪些网络请求是需要我们拦截的，这个是通过方法can​Init​With​Request:​来实现的，比如我们现在需要拦截全部的HTTP和HTTPS请求，那么这个逻辑我们就可以在can​Init​With​Request:​中来定义</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 需要控制的请求</div><div class="line"></div><div class="line"> @param request 此次请求</div><div class="line"> @return 是否需要监控</div><div class="line"> */</div><div class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![request.URL.scheme isEqualToString:<span class="string">@"http"</span>] &amp;&amp;</div><div class="line">        ![request.URL.scheme isEqualToString:<span class="string">@"https"</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在方法canonicalRequestForRequest:中，我们可以自定义当前的请求request，当然如果不需要自定义，直接返回就行</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 设置我们自己的自定义请求</div><div class="line"> 可以在这里统一加上头之类的</div><div class="line"> </div><div class="line"> @param request 应用的此次请求</div><div class="line"> @return 我们自定义的请求</div><div class="line"> */</div><div class="line">+ (<span class="built_in">NSURLRequest</span> *)canonicalRequestForRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</div><div class="line">    <span class="keyword">return</span> request;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于每个NSURLProtocol的子类，都有一个client，通过它来对iOS的网络加载系统进行一系列的操作，比如，通知收到response或者错误的网络请求等等</p>
<p>这样，我们通过这两个方法，就已经能够拦截住iOS的网络请求了，但是这里有个问题</p>
<p>在我们上层业务调用网络请求的时候，首先会调用我们的can​Init​With​Request:方法，询问是否对该请求进行处理，接着会调用我们的canonicalRequestForRequest:来自定义一个request，接着又会去调用can​Init​With​Request:询问自定义的request是否需要处理，我们又返回YES，然后又去调用了canonicalRequestForRequest:，这样，就形成了一个死循环了，这肯定是我们不希望看到的。</p>
<p>有个处理方法，我们可以对每个处理过的request进行标记，在判断如果这个request已经处理过了，那么我们就不再进行处理，这样就有效避免了死循环</p>
<p>在我们自定义request的方法中，我们来设置处理标志</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSURLRequest</span> *)canonicalRequestForRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</div><div class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableReqeust = [request mutableCopy];</div><div class="line">    [<span class="built_in">NSURLProtocol</span> setProperty:@YES</div><div class="line">                        forKey:PPSHTTP</div><div class="line">                     inRequest:mutableReqeust];</div><div class="line">    <span class="keyword">return</span> [mutableReqeust <span class="keyword">copy</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在我们的询问处理方法中，通过判断是否有处理过的标志，来进行拦截</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![request.URL.scheme isEqualToString:<span class="string">@"http"</span>] &amp;&amp;</div><div class="line">        ![request.URL.scheme isEqualToString:<span class="string">@"https"</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果是已经拦截过的  就放行</span></div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSURLProtocol</span> propertyForKey:PPSHTTP inRequest:request] ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就避免了死循环</p>
<p>接下来，就是需要将这个request发送出去了，因为如果我们不处理这个request请求，系统会自动发出这个网络请求，但是当我们处理了这个请求，就需要我们手动来进行发送了。</p>
<p>我们要手动发送这个网络请求，需要重写startLoading方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startLoading &#123;</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [[<span class="keyword">self</span> <span class="keyword">class</span>] canonicalRequestForRequest:<span class="keyword">self</span>.request];</div><div class="line">    <span class="keyword">self</span>.connection = [[<span class="built_in">NSURLConnection</span> alloc] initWithRequest:request delegate:<span class="keyword">self</span> startImmediately:<span class="literal">YES</span>];</div><div class="line">    <span class="keyword">self</span>.pps_request = <span class="keyword">self</span>.request;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解释一下上面的代码，因为我们拦截的这个请求是一个真实的请求，所以我们需要创建这样一个真实的网络请求，在第二行代码中，将我们自定义创建的request发了出了，第三行是为了保存当前的request，作为我们后面的处理对象。</p>
<p>当然，有start就有stop，stop就很简单了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)stopLoading &#123;</div><div class="line">    [<span class="keyword">self</span>.connection cancel];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在startLoading中，我们发起了一个NSURLConnection的请求，因为NSURLProtocol使我们自己定义的，所以我们需要将网络请求的一系列操作全部传递出去，不然上层就不知道当前网络的一个请求状态，那我们怎么将这个网络状态传到上层？在之前，我们说过每个protocol有一个NSURLProtocolClient实例，我们就通过这个client来传递。</p>
<p>传递一个网络请求，无外乎就是传递请求的一些过程，数据，结果等等。 发起了发起了一个NSURLConnection的请求，实现它的delegate就能够知道网络请求的一系列操作</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - NSURLConnectionDelegate</span></div><div class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didFailWithError:(<span class="built_in">NSError</span> *)error&#123;</div><div class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didFailWithError:error];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)connectionShouldUseCredentialStorage:(<span class="built_in">NSURLConnection</span> *)connection&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didReceiveAuthenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge&#123;</div><div class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didReceiveAuthenticationChallenge:challenge];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection</div><div class="line">didCancelAuthenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge &#123;</div><div class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didCancelAuthenticationChallenge:challenge];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - NSURLConnectionDataDelegate</span></div><div class="line">-(<span class="built_in">NSURLRequest</span> *)connection:(<span class="built_in">NSURLConnection</span> *)connection willSendRequest:(<span class="built_in">NSURLRequest</span> *)request redirectResponse:(<span class="built_in">NSURLResponse</span> *)response&#123;</div><div class="line">    <span class="keyword">if</span> (response != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.pps_response = response;</div><div class="line">        [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> wasRedirectedToRequest:request redirectResponse:response];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> request;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection</div><div class="line">didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response &#123;</div><div class="line">    [[<span class="keyword">self</span> client] URLProtocol:<span class="keyword">self</span> didReceiveResponse:response cacheStoragePolicy:<span class="built_in">NSURLCacheStorageAllowed</span>];</div><div class="line">    <span class="keyword">self</span>.pps_response = response;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</div><div class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didLoadData:data];</div><div class="line">    [<span class="keyword">self</span>.pps_data appendData:data];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSCachedURLResponse</span> *)connection:(<span class="built_in">NSURLConnection</span> *)connection</div><div class="line">                  willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)cachedResponse &#123;</div><div class="line">    <span class="keyword">return</span> cachedResponse;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)connectionDidFinishLoading:(<span class="built_in">NSURLConnection</span> *)connection &#123;</div><div class="line">    [[<span class="keyword">self</span> client] URLProtocolDidFinishLoading:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实从上面的代码，我们可以看出，我们就是在我们自己自定义的protocol中进行了一个传递过程，其他的也没有做操作</p>
<p>这样，基本的protocol就已经实现完成，那么怎样来拦截网络。我们需要将我们自定义的PPSURLProtocol通过NSURLProtocol注册到我们的网络加载系统中，告诉系统我们的网络请求处理类不再是默认的NSURLProtocol，而是我们自定义的PPSURLProtocol</p>
<p>我们在PPSURLProtocol暴露两个方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PPSURLProtocol</span> : <span class="title">NSURLProtocol</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)start;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)end;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>然后在我们的APP启动的时候，调用start，就可以监听到我们的网络请求。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)start &#123;</div><div class="line">    PPSURLSessionConfiguration *sessionConfiguration = [PPSURLSessionConfiguration defaultConfiguration];</div><div class="line">    [<span class="built_in">NSURLProtocol</span> registerClass:[PPSURLProtocol <span class="keyword">class</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)end &#123;</div><div class="line">    PPSURLSessionConfiguration *sessionConfiguration = [PPSURLSessionConfiguration defaultConfiguration];</div><div class="line">    [<span class="built_in">NSURLProtocol</span> unregisterClass:[PPSURLProtocol <span class="keyword">class</span>]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前为止，我们上面的代码已经能够监控到绝大部分的网络请求，但是呢，有一个却是特殊的。</p>
<p>对于NSURLSession发起的网络请求，我们发现通过shared得到的session发起的网络请求都能够监听到，但是通过方法<em>sessionWithConfiguration:delegate:delegateQueue:</em>得到的session，我们是不能监听到的，原因就出在NSURLSessionConfiguration上，我们进到NSURLSessionConfiguration里面看一下，他有一个属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;Class&gt; *protocolClasses;</div></pre></td></tr></table></figure>
<p>我们能够看出，这是一个NSURLProtocol数组，上面我们提到了，我们监控网络是通过注册NSURLProtocol来进行网络监控的，但是通过<em>sessionWithConfiguration:delegate:delegateQueue:</em>得到的session，他的configuration中已经有一个NSURLProtocol，所以他不会走我们的protocol来，怎么解决这个问题呢？ 其实很简单，我们将NSURLSessionConfiguration的属性protocolClasses的get方法hook掉，通过返回我们自己的protocol，这样，我们就能够监控到通过<em>sessionWithConfiguration:delegate:delegateQueue:</em>得到的session的网络请求</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)load &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.isSwizzle=<span class="literal">YES</span>;</div><div class="line">    Class cls = <span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFURLSessionConfiguration"</span>) ?: <span class="built_in">NSClassFromString</span>(<span class="string">@"NSURLSessionConfiguration"</span>);</div><div class="line">    [<span class="keyword">self</span> swizzleSelector:<span class="keyword">@selector</span>(protocolClasses) fromClass:cls toClass:[<span class="keyword">self</span> <span class="keyword">class</span>]];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)unload &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.isSwizzle=<span class="literal">NO</span>;</div><div class="line">    Class cls = <span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFURLSessionConfiguration"</span>) ?: <span class="built_in">NSClassFromString</span>(<span class="string">@"NSURLSessionConfiguration"</span>);</div><div class="line">    [<span class="keyword">self</span> swizzleSelector:<span class="keyword">@selector</span>(protocolClasses) fromClass:cls toClass:[<span class="keyword">self</span> <span class="keyword">class</span>]];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)swizzleSelector:(SEL)selector fromClass:(Class)original toClass:(Class)stub &#123;</div><div class="line">    </div><div class="line">    Method originalMethod = class_getInstanceMethod(original, selector);</div><div class="line">    Method stubMethod = class_getInstanceMethod(stub, selector);</div><div class="line">    <span class="keyword">if</span> (!originalMethod || !stubMethod) &#123;</div><div class="line">        [<span class="built_in">NSException</span> raise:<span class="built_in">NSInternalInconsistencyException</span> format:<span class="string">@"Couldn't load NEURLSessionConfiguration."</span>];</div><div class="line">    &#125;</div><div class="line">    method_exchangeImplementations(originalMethod, stubMethod);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> *)protocolClasses &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> @[[PPSURLProtocol <span class="keyword">class</span>]];</div><div class="line">    <span class="comment">//如果还有其他的监控protocol，也可以在这里加进去</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在启动的时候，将这个方法替换掉，在移除监听的时候，恢复之前的方法</p>
<p>至此，我们的监听就完成了，如果我们需要将这所有的监听存起来，在protocol的start或者stop中获取到request和response，将他们存储起来就行，需要说明的是，据苹果的官方说明，因为请求参数可能会很大，为了保证性能，请求参数是没有被拦截掉的，就是post的HTTPBody是没有的，我没有获取出来，如果有其他的办法，还请告知</p>
<p>源码，放在了：</p>
<p><a href="https://github.com/yangqian111/PPSNetworkMonitor" target="_blank" rel="external">https://github.com/yangqian111/PPSNetworkMonitor</a></p>
<p><strong>我的个人微博：ppsheep_Qian</strong></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p><div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div><br>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;APP内的网络请求的监控，相信很多APP内都有这个模块，通过监控APP内的网络请求，观察各个API的稳定性。这些数据，一般我们都会先收集起来，在一段时间内，上传到服务器。在iOS中，出了WK的网络请求，其他的所有网络请求都可以通过NSURLProtocol来拦截监控，下面我们来实践一下。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://ppsheep.com/all-categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="hook网络" scheme="http://ppsheep.com/all-tags/hook%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Swift下UserDefaults的正确姿势</title>
    <link href="http://ppsheep.com/2017/04/06/UserDefaults%20in%20Swift/"/>
    <id>http://ppsheep.com/2017/04/06/UserDefaults in Swift/</id>
    <published>2017-04-06T08:15:29.000Z</published>
    <updated>2017-04-07T10:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚在微博上看到一篇关于UserDefaults的文章，想起来之前在swift.gg上看到一篇关于在3.0下，UserDaults的正确使用姿势，记录下来。关于那篇文章，我已经有转发 <a href="http://weibo.com/ppsheep" target="_blank" rel="external">http://weibo.com/ppsheep</a><br>感兴趣可以上去瞧瞧</p>
<a id="more"></a>
<p>在swift.gg上有一篇详细介绍swift 3.0下，UserDefaults的使用，只是当时读到这篇文章，没有看到demo，就顺手写了一个，理解也更加深刻。</p>
<p>这里我就把demo直接粘出来好了，其实就是一个扩展，这里用到了空间、枚举等特性，具体我就不作介绍，肯定没这篇文章写得好  文章链接 <a href="http://www.swift.gg/2017/01/16/swift-userdefaults-protocol/" target="_blank" rel="external">http://www.swift.gg/2017/01/16/swift-userdefaults-protocol/</a></p>
<p>对UserDefaults进行扩展</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">KeyNamespaceable</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">KeyNamespaceable</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">namespace</span>&lt;T&gt;<span class="params">(<span class="number">_</span> key: T)</span></span> -&gt; <span class="type">String</span> <span class="keyword">where</span> <span class="type">T</span>: <span class="type">RawRepresentable</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(Self.self).\(key.rawValue)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BoolUserDefaultable</span> : <span class="title">KeyNamespaceable</span> </span>&#123;</div><div class="line">    </div><div class="line">    associatedtype <span class="type">BoolDefaultKey</span> : <span class="type">RawRepresentable</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BoolUserDefaultable</span> <span class="title">where</span> <span class="title">BoolDefaultKey</span>.<span class="title">RawValue</span> == <span class="title">String</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// BoolUserDefaultable extension</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> value: Bool, forKey key: BoolDefaultKey)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> key = namespace(key)</div><div class="line">        <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(value, forKey: key)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">bool</span><span class="params">(forKey key: BoolDefaultKey)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> key = namespace(key)</div><div class="line">        <span class="keyword">return</span> <span class="type">UserDefaults</span>.standard.bool(forKey: key)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">StringUserDefaultable</span> : <span class="title">KeyNamespaceable</span> </span>&#123;</div><div class="line">    </div><div class="line">    associatedtype <span class="type">StringDefaultKey</span> : <span class="type">RawRepresentable</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">StringUserDefaultable</span> <span class="title">where</span> <span class="title">StringDefaultKey</span>.<span class="title">RawValue</span> == <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="comment">// StringUserDefaultable extension</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> value: String, forKey key: StringDefaultKey)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> key = namespace(key)</div><div class="line">        <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(value, forKey: key)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">string</span><span class="params">(forKey key: StringDefaultKey)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> key = namespace(key)</div><div class="line">        <span class="keyword">return</span> <span class="type">UserDefaults</span>.standard.string(forKey: key)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserDefaults</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Account</span> : <span class="title">BoolUserDefaultable</span> </span>&#123;</div><div class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">BoolDefaultKey</span> : <span class="title">String</span> </span>&#123;</div><div class="line">            <span class="keyword">case</span> isUserLoggedIn</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AccoutToken</span> : <span class="title">StringUserDefaultable</span> </span>&#123;</div><div class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">StringDefaultKey</span> : <span class="title">String</span> </span>&#123;</div><div class="line">            <span class="keyword">case</span> userToken</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的知识，都是用到了上面那篇文章中的</p>
<p>有了这个扩展之后，加入我们需要记录一下登录的标志，只需要</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置登录标志</span></div><div class="line"><span class="type">UserDefaults</span>.<span class="type">Account</span>.<span class="keyword">set</span>(<span class="literal">true</span>, forKey: .isUserLoggedIn)</div><div class="line"><span class="comment">//获取登录标志</span></div><div class="line"><span class="type">UserDefaults</span>.<span class="type">Account</span>.bool(forKey: .isUserLoggedIn)</div></pre></td></tr></table></figure>
<p>使用起来非常简洁明了，当然并不局限于bool 我还扩展了String，其他的就可以依葫芦画瓢</p>
<p><strong>最近新建了一个微博，还是觉得公众号有一些局限性，并且感觉微博更能关注业界的动态，同样欢迎大家关注：ppsheep_Qian</strong></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p>上边是公众号，下边是我个人微信</p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br>    <image src="http://o8bxt3lx0.bkt.clouddn.com/avatar.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚在微博上看到一篇关于UserDefaults的文章，想起来之前在swift.gg上看到一篇关于在3.0下，UserDaults的正确使用姿势，记录下来。关于那篇文章，我已经有转发 &lt;a href=&quot;http://weibo.com/ppsheep&quot;&gt;http://weibo.com/ppsheep&lt;/a&gt;&lt;br&gt;感兴趣可以上去瞧瞧&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://ppsheep.com/all-categories/Swift/"/>
    
    
      <category term="Swift UserDefaults" scheme="http://ppsheep.com/all-tags/Swift-UserDefaults/"/>
    
  </entry>
  
  <entry>
    <title>Operation Queues并发编程</title>
    <link href="http://ppsheep.com/2017/03/14/Operation-Queues%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://ppsheep.com/2017/03/14/Operation-Queues并发编程/</id>
    <published>2017-03-14T06:23:34.000Z</published>
    <updated>2017-03-15T07:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>并发、异步在我们的编程中，见到的太多了。在iOS中，实现并发的主要三个途径Operation Queues、Dispatch Queues、Dispatch Sources，今天我们就来详细介绍Operatin Queues的使用，花了两天时间写这一篇，值得一看。</p>
<a id="more"></a>
<h3 id="为什么要并发"><a href="#为什么要并发" class="headerlink" title="为什么要并发"></a>为什么要并发</h3><p>现在是个手机，拿出来就是多少多少CPU，并且这个CPU指挥增加不会减少，那我们作为开发者，需要尽可能地利用这么多个核心数，怎么利用呢，就是提高并发。</p>
<h3 id="GCD和Operation-Queues的选择"><a href="#GCD和Operation-Queues的选择" class="headerlink" title="GCD和Operation Queues的选择"></a>GCD和Operation Queues的选择</h3><p>经常看到这样的问题，到底是使用队列还是GCD呢，我说一下我在平常编码过程中的使用情况。我一般GCD是只使用在写单例的时候，其他需要并发异步的地方，我一般使用的是队列。</p>
<p>因为队列的可控性更强一些，苹果提供了一系列的API供我们操作并发的任务。虽然队列是在GCD的基础上再封装一层，这样说来使用队列性能会较GCD差一些，但是这个性能差异早已经不是我们该考虑的问题，这个差异无外乎就是Operation对象的开销，这个差异就太小了。</p>
<h3 id="GCD和Operation-Queues的区别"><a href="#GCD和Operation-Queues的区别" class="headerlink" title="GCD和Operation Queues的区别"></a>GCD和Operation Queues的区别</h3><p>使用Operation Queues，我们队任务的可控性会强很多，对于一个正在执行的任务，我们可以暂停、恢复、取消，还可以为任务之间添加依赖</p>
<p>但是对于GCD呢，我们不关心任务的调度情况，只要扔进去，让系统帮我们处理就好，如果我们要实现像上面队列所说的，就非常棘手</p>
<h3 id="Operation-NSOperation"><a href="#Operation-NSOperation" class="headerlink" title="Operation(NSOperation)"></a>Operation(NSOperation)</h3><p>我们一般需要并发任务的时候，都是将任务封装到一个operation对象中，但是我们去看苹果官方的文档，上面有这样一句话</p>
<blockquote>
<p>The NSOperation class is an abstract class you use to encapsulate the code and data associated with a single task. Because it is abstract, you do not use this class directly but instead subclass or use one of the system-defined subclasses (NSInvocationOperation or BlockOperation) to perform the actual task. Despite being abstract, the base implementation of NSOperation does include significant logic to coordinate the safe execution of your task. The presence of this built-in logic allows you to focus on the actual implementation of your task, rather than on the glue code needed to ensure it works correctly with other system objects.</p>
</blockquote>
<p>解释一下，上面的大致意思就是Operation(在Swift中已经更名为Operation，在OC中为NSOperation，上面一段话其实是Swift下的一个文档，可能苹果还没及时更新)其实是一个抽象类，不能直接实例化，我们需要自定义一个它的子类或者使用系统提供的NSInvocationOperation或者BlockOperation</p>
<p><strong>注意：在Swift中 NSInvocationOperation 已经被抛弃掉了，只剩下BlockOperation，在OC下 NSInvocationOperation 仍然可以使用</strong></p>
<h5 id="NSInvocationOperation"><a href="#NSInvocationOperation" class="headerlink" title="NSInvocationOperation"></a>NSInvocationOperation</h5><p>使用NSInvocationOperation能够非常方便的并发任务，在NSInvocationOperation中有这样一个方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithTarget:(<span class="keyword">id</span>)target selector:(SEL)sel object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg;</div></pre></td></tr></table></figure>
<p>加入我们需要并发这个方法中的代码，那么我们只需要传入方法所在的对象和这个现有的方法，就可以直接实行并发</p>
<p>我们来看一下简单的代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSOperationQueue</span> *myQueue;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)viewDidLoad&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.myQueue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">    <span class="built_in">NSInvocationOperation</span> *invocationOp = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(doSomething:) object:<span class="string">@"data"</span>];</div><div class="line">    [<span class="keyword">self</span>.myQueue addOperation:invocationOp];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doSomething:(<span class="keyword">id</span>)data&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@-%@-%@"</span>,data,[<span class="built_in">NSThread</span> mainThread],[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"finish"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>非常简单，上面的代码就是讲方法doSomething:异步执行，我们看一下控制台输出什么？</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-14</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">37.520</span> OperationQueues[<span class="number">10294</span>:<span class="number">2193908</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x600000079500</span>&gt;&#123;number = <span class="number">1</span>, name = main&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-14</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">37.520</span> OperationQueues[<span class="number">10294</span>:<span class="number">2194320</span>] data-&lt;<span class="built_in">NSThread</span>: <span class="number">0x600000079500</span>&gt;&#123;number = <span class="number">1</span>, name = (null)&#125;-&lt;<span class="built_in">NSThread</span>: <span class="number">0x600000266440</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-14</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">40.525</span> OperationQueues[<span class="number">10294</span>:<span class="number">2194320</span>] finish</div></pre></td></tr></table></figure>
<p>从上面的输出，我们可以看出，doSomething:这个方法子啊线程0x600000266440中执行，而我们拿到的主线程是0x600000079500，可以看出，这里实现了异步并发</p>
<p><strong>注意</strong></p>
<p>这里有个注意点，在NSOperation中有个start方法，用这个方法并不能实现并发。在NSOperation中 <em>isAsynchronous</em> (iOS7之前是方法<em>isConcurrent</em>)返回值代表了operation相对了调用它的start方法的线程来说是否是异步执行的，而默认情况下，他返回的是NO，也就是说直接调用start方法，是不能够实现异步执行的，我们来试一下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)viewDidLoad&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"><span class="comment">//    self.myQueue = [[NSOperationQueue alloc] init];</span></div><div class="line">    <span class="built_in">NSInvocationOperation</span> *invocationOp = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(doSomething:) object:<span class="string">@"data"</span>];</div><div class="line"><span class="comment">//    [self.myQueue addOperation:invocationOp];</span></div><div class="line">    [invocationOp start];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doSomething:(<span class="keyword">id</span>)data&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@-%@-%@"</span>,data,[<span class="built_in">NSThread</span> mainThread],[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"finish"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>看一下控制台的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2017-03-14 15:55:31.074 OperationQueues[11285:2454150] data-&lt;NSThread: 0x600000079c00&gt;&#123;number = 1, name = main&#125;-&lt;NSThread: 0x600000079c00&gt;&#123;number = 1, name = main&#125;</div><div class="line">2017-03-14 15:55:34.146 OperationQueues[11285:2454150] finish</div><div class="line">2017-03-14 15:55:34.147 OperationQueues[11285:2454150] &lt;NSThread: 0x600000079c00&gt;&#123;number = 1, name = main&#125;</div></pre></td></tr></table></figure>
<p>我们可以明显看到，doSomething是在主线程中执行，并且阻塞了线程，所以我们在进行operation并发的时候，都需要将operation添加到队列当中，才能够实现并发，因为当我们讲一个非并发的operation添加到队列中时，队列会自动为这个operation创建一个线程，来进行异步并发</p>
<h5 id="BlockOperation"><a href="#BlockOperation" class="headerlink" title="BlockOperation"></a>BlockOperation</h5><p>BlockOperation和Dispatch Queues比较类似，那么为什么有了Dispatch Queues还要使用BlockOperation呢？我们有时候会遇到这样的情况</p>
<ul>
<li>我们已经有了一个BlockOperation，不想再创建Dispatch Queues</li>
<li>我们需要在operation之间设置一些依赖关系、进行一些KVO的观察，而这个Dispatch Queues是达不到的</li>
</ul>
<p>同样来使用一下BlockOperation</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> operationQueue = <span class="type">OperationQueue</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="keyword">let</span> blockOp = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123; </div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(Thread.main)--\(Thread.current)"</span>)</div><div class="line">            sleep(<span class="number">3</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"blockOp1 finish"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        blockOp.addExecutionBlock &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(Thread.main)--\(Thread.current)"</span>)</div><div class="line">            sleep(<span class="number">3</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"blockOp2 finish"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        blockOp.addExecutionBlock &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(Thread.main)--\(Thread.current)"</span>)</div><div class="line">            sleep(<span class="number">3</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"blockOp3 finish"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        operationQueue.addOperation(blockOp)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看一下控制台的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;NSThread: 0x6080000780c0&gt;&#123;number = 1, name = (null)&#125;--&lt;NSThread: 0x608000265b80&gt;&#123;number = 3, name = (null)&#125;</div><div class="line">&lt;NSThread: 0x6080000780c0&gt;&#123;number = 1, name = (null)&#125;--&lt;NSThread: 0x608000265d40&gt;&#123;number = 4, name = (null)&#125;</div><div class="line">&lt;NSThread: 0x6080000780c0&gt;&#123;number = 1, name = (null)&#125;--&lt;NSThread: 0x60000007f300&gt;&#123;number = 5, name = (null)&#125;</div><div class="line">blockOp2 finish</div><div class="line">blockOp3 finish</div><div class="line">blockOp1 finish</div></pre></td></tr></table></figure>
<p>每次运行，可能输出的结果都不一样，我们通过看线程地址，就能分辨出，每个block都是在一个单独的线程中执行</p>
<p>同样的，我们还是来试一下，使用start来进行启动queue</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    let operationQueue = OperationQueue()</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="keyword">let</span> blockOp = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123; </div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(Thread.main)--1--\(Thread.current)"</span>)</div><div class="line">            sleep(<span class="number">3</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"blockOp1 finish"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        blockOp.addExecutionBlock &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(Thread.main)--2--\(Thread.current)"</span>)</div><div class="line">            sleep(<span class="number">3</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"blockOp2 finish"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        blockOp.addExecutionBlock &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(Thread.main)--3--\(Thread.current)"</span>)</div><div class="line">            sleep(<span class="number">3</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"blockOp3 finish"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line"><span class="comment">//        operationQueue.addOperation(blockOp)</span></div><div class="line">        blockOp.start()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出就截然不同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;NSThread: 0x17006e7c0&gt;&#123;number = 1, name = main&#125;--1--&lt;NSThread: 0x17006e7c0&gt;&#123;number = 1, name = main&#125;</div><div class="line">&lt;NSThread: 0x17006e7c0&gt;&#123;number = 1, name = (null)&#125;--2--&lt;NSThread: 0x174078d00&gt;&#123;number = 3, name = (null)&#125;</div><div class="line">blockOp2 finish</div><div class="line">&lt;NSThread: 0x17006e7c0&gt;&#123;number = 1, name = (null)&#125;--3--&lt;NSThread: 0x174078d00&gt;&#123;number = 3, name = (null)&#125;</div><div class="line">blockOp1 finish</div><div class="line">blockOp3 finish</div></pre></td></tr></table></figure>
<p>完全没有规律的，每次输出都会不一样，但是这里有一个肯定是不会变的，不知道大家能不能猜到</p>
<p>就是首先加入到operation中的block都将会在当前调起的start的线程中执行，其他的block就不一定了</p>
<p>关于BlockOperation，只要其中的block大于1，就会触发多线程执行，但是这个多线程使我们完全不能控制的，都是系统调起，其中可能遇到阻塞，也可能不会遇到阻塞，这完全依赖于系统的分配</p>
<h3 id="自定义Operation"><a href="#自定义Operation" class="headerlink" title="自定义Operation"></a>自定义Operation</h3><p>我们自定义Operation对象，可以定义非并发的Operation也可以定义并发的Operation。什么意思呢？我们之前已经使用过了BlockOperation和NSInvocationOperation，两种都不能自身实现并发，我们这里可以自己实现自身并发的Operation，在调用start方法，即可以让他并发，下面我们来实现一下</p>
<h5 id="非并发的Operation"><a href="#非并发的Operation" class="headerlink" title="非并发的Operation"></a>非并发的Operation</h5><p>对于非并发的Operation，很简单，我们只需要让它可以正常执行main方法中的任务就行，并且能够响应取消事件就行</p>
<p>关于响应取消事件，为了要响应取消事件，我们需要在执行时，不断检测isCancelled方法，看看返回是否是取消状态，在苹果的文档中有这样一句话</p>
<blockquote>
<p>You should always check the value of this property before doing any work towards accomplishing the operation’s task, which typically means checking it at the beginning of your custom main() method. It is possible for an operation to be cancelled before it begins executing or at any time while it is executing. Therefore, checking the value at the beginning of your main() method (and periodically throughout that method) lets you exit as quickly as possible when an operation is cancelled.</p>
</blockquote>
<p>上面的大致意思就是，在你执行main方法，或者main方法需要执行时(这个我的理解是在main方法中执行了一个循环)，都应该检查这个operation 是否已经cancle掉了，换句话说，就是在main执行之前应该检查，在main中执行的循环，每次循环之前也应该检查</p>
<p>读到这里，我们应该就会了解到，其实operation的cancle不是立刻取消的，而是每次在检查isCancled的时候，才会来取消</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOperation</span>: <span class="title">Operation</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> message: <span class="type">String</span>!</div><div class="line">    <span class="keyword">var</span> info: <span class="type">String</span>!</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(message: <span class="type">String</span>, messageInfo: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        <span class="keyword">self</span>.message = message<span class="comment">//注意这里swift的写法，参数和变量相同，下面是不相同</span></div><div class="line">        info = messageInfo</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> isCancelled &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(Thread.main)--\(Thread.current)"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> <span class="keyword">var</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">10</span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> isCancelled &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(i)"</span>)</div><div class="line">            </div><div class="line">            sleep(<span class="number">2</span>)</div><div class="line">            </div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在main方法执行之前，和每次循环执行时，都会检测当前的OPeration是否已经cancle了，但是这个是一个非并发的Operation，我们使用start任然会卡掉发起start的线程，接下来我们来自定义一个可以并发的线程</p>
<h5 id="并发的Operation"><a href="#并发的Operation" class="headerlink" title="并发的Operation"></a>并发的Operation</h5><p>查看苹果文档，是最准确的，我们看看苹果文档上，是怎么说的我们自定义的一个并发的operation。</p>
<p><a href="https://developer.apple.com/reference/foundation/operation" target="_blank" rel="external">https://developer.apple.com/reference/foundation/operation</a><br>这是关于Operation的整个介绍，我们可以再下面找到具体的属性，方法，点进去查看，其中方法<em>isFinished</em>有这样一句话：</p>
<blockquote>
<p>When implementing a concurrent operation object, you must override the implementation of this property so that you can return the finished state of your operation. </p>
</blockquote>
<p>同样的，还有<em>isExecuting</em></p>
<blockquote>
<p>When implementing a concurrent operation object, you must override the implementation of this property so that you can return the execution state of your operation. </p>
</blockquote>
<p><em>start</em></p>
<blockquote>
<p>If you are implementing a concurrent operation, you must override this method and use it to initiate your operation.</p>
</blockquote>
<p>大致我们能够了解到，这三个方法是必须要重写的，前两个方法是控制着当前operation的运行环境，是否正在运行，是否运行完成</p>
<p>start方法，我们就不说了，这个肯定要重写，因为要在这个里面重启线程来运行我们的operation任务</p>
<p>我们再来看一下<em>main</em>方法的说明</p>
<blockquote>
<p>If you are implementing a concurrent operation, you are not required to override this method but may do so if you plan to call it from your custom start() method.</p>
</blockquote>
<p>从官方的文档中，我们可以看出，我们不用必须重写main方法，但是如果我们想自己启动线程，异步执行operation的话，我们最好还是重写它，这是为什么呢？</p>
<p>其实我们看一下，start方法中，其实是为了配置当前的operation执行的环境(启动一个线程)</p>
<p>而我们真正执行的代码，虽然也可以方法start方法中，但是感觉逻辑有点混乱，如果我们放到main方法中，这样operation的结构更加清晰，明了</p>
<p>我们这里再加一个重写属性<em>isReady</em>，这个重写属性也是可选的，这里选择重写他，是为了展示一下重写这个方法的时候，需要设置KVO，因为在operation中，我们很多属性，都是可以KVO监测的，如果我们重写，都应该在属性改变时，通知外部，我们的属性改变了</p>
<p>好，我们来数一下，需要重写的方法或者属性的getter：</p>
<ul>
<li>isFinished           (必须)</li>
<li>isExecuting           (必须)</li>
<li>start               (必须)</li>
<li>main    (非必须)</li>
<li>isReady     (非必须)</li>
</ul>
<p>首先我把整个类的代码都贴出来，再来解释</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAnotherOperation</span>: <span class="title">Operation</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> message: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> info: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span>  ready, executing, finished</div><div class="line">        <span class="keyword">var</span> keyPath: <span class="type">String</span>&#123;</div><div class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">            <span class="keyword">case</span> .ready:</div><div class="line">                <span class="keyword">return</span> <span class="string">"isReady"</span></div><div class="line">            <span class="keyword">case</span> .executing:</div><div class="line">                <span class="keyword">return</span> <span class="string">"isExecuting"</span></div><div class="line">            <span class="keyword">case</span> .finished:</div><div class="line">                <span class="keyword">return</span> <span class="string">"isFinished"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> state = <span class="type">State</span>.ready &#123;</div><div class="line">        <span class="keyword">willSet</span>&#123;</div><div class="line">            willChangeValue(forKey: newValue.keyPath)</div><div class="line">            willChangeValue(forKey: state.keyPath)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            didChangeValue(forKey: oldValue.keyPath)</div><div class="line">            didChangeValue(forKey: state.keyPath)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(message: <span class="type">String</span>, info: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        <span class="keyword">self</span>.message = message</div><div class="line">        <span class="keyword">self</span>.info = info</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> isCancelled &#123;</div><div class="line">            state = .finished</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        state = .executing</div><div class="line">        <span class="type">Thread</span>.detachNewThreadSelector(#selector(<span class="type">Operation</span>.main), toTarget: <span class="keyword">self</span>, with: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(Thread.main)--\(Thread.current)"</span>)</div><div class="line">        <span class="keyword">for</span> <span class="keyword">var</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">10</span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> isCancelled &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(i)"</span>)</div><div class="line">            </div><div class="line">            sleep(<span class="number">2</span>)</div><div class="line">            </div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        sleep(<span class="number">3</span>)</div><div class="line">        </div><div class="line">       state = .finished</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - override</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> isReady: <span class="type">Bool</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.isReady &amp;&amp; state == .ready</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> isFinished: <span class="type">Bool</span>&#123;</div><div class="line">        <span class="keyword">return</span> state == .finished</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> isExecuting: <span class="type">Bool</span>&#123;</div><div class="line">        <span class="keyword">return</span> state == .executing</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> isAsynchronous: <span class="type">Bool</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，我是通过swift来实现的，相信读懂了的同学，用OC也能够简单实现，如果有什么疑问，再联系我好了</p>
<p>解释一下上面的代码：</p>
<p>因为，operation的属性isReady、isExecuting、isFinished都需要在改变时通知外部KVO通知，所以我们在将要改变他们的值和改变之后，都需要发出通知，如果我每个都去写，觉得麻烦，就定义了一个枚举State，代表当前的一个operation的状态</p>
<p>每次不管他们任何一个的状态需要改变时，我直接改变state的值，然后在state的willSet和didSet方法中来发出通知</p>
<p>这个时候就能感觉出，swift的强大之处了，枚举中能够定义属性，根据当前的枚举值，返回通知的key</p>
<p>在<em>isReady</em>方法中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> isReady: <span class="type">Bool</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.isReady &amp;&amp; state == .ready</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要忘记，一定要检查父类的ready属性</p>
<p>这样，我们每次，直接调用start方法，就是启了一个线程，在单独跑这个任务</p>
<h3 id="配置operation之间的联系"><a href="#配置operation之间的联系" class="headerlink" title="配置operation之间的联系"></a>配置operation之间的联系</h3><p>我们之前在讲到operation和GCD的优缺点的时候，说到过，operation更加灵活，operation之间的灵活点之一就是operation之间可以添加依赖的，一个operation可以在另一个operation执行完成之后，再执行</p>
<p><strong>注意</strong></p>
<ul>
<li>在我们添加依赖的时候，需要在添加到队列之前，就将依赖设置好，如果在添加到队列之后设置，依赖就可能会失效，因为添加到队列，operation就随时可能被执行</li>
<li>依赖是单向的a.addDependency(b)，那么这个只会是a依赖于b，a在b执行完过后才会再次执行，所以，我们设置的时候不要设置成了一个循环依赖，这样operation都不会执行了</li>
<li>设置operation不管是我们自定义的还是系统提供的都可以设置，没有区别</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> blockOp1 = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(Thread.main)--1--\(Thread.current)"</span>)</div><div class="line">    sleep(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> blockOp2 = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(Thread.main)--2--\(Thread.current)"</span>)</div><div class="line">    sleep(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> blockOp3 = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(Thread.main)--3--\(Thread.current)"</span>)</div><div class="line">    sleep(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">blockOp2.addDependency(blockOp1)</div><div class="line">blockOp3.addDependency(blockOp2)</div><div class="line">myQueue.addOperation(blockOp1)</div><div class="line">myQueue.addOperation(blockOp2)</div><div class="line">myQueue.addOperation(blockOp3)</div></pre></td></tr></table></figure>
<p>上面的代码运行，就能看出blockOp1——&gt; blockOp2——&gt; blockOp3<br>这样的执行顺序</p>
<h3 id="修改operation在队列中的优先级"><a href="#修改operation在队列中的优先级" class="headerlink" title="修改operation在队列中的优先级"></a>修改operation在队列中的优先级</h3><p>这里需要注意的是，只有在同一队列中，修改operation的优先级才起作用，不然是不起作用的。</p>
<p>而且只有当一个operation的isReady为true的时候，这个优先级才起作用，举个例子</p>
<p>比如有两个operation，有一个高优先级的operation A 它的isReady为 false，还有一个低优先级的operation B 它的isReady为 true，那么这样的情况下，B仍然会先执行。</p>
<p>如果他们的isReady均为true 这个时候，才是A会首先执行</p>
<p>在Operation中有个枚举</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">QueuePriority</span> : <span class="title">Int</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> veryLow</div><div class="line"></div><div class="line">    <span class="keyword">case</span> low</div><div class="line"></div><div class="line">    <span class="keyword">case</span> normal</div><div class="line"></div><div class="line">    <span class="keyword">case</span> high</div><div class="line"></div><div class="line">    <span class="keyword">case</span> veryHigh</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中决定了在队列中的优先级</p>
<h3 id="修改operation执行任务的线程优先级"><a href="#修改operation执行任务的线程优先级" class="headerlink" title="修改operation执行任务的线程优先级"></a>修改operation执行任务的线程优先级</h3><p>在iOS中，我们知道线程都是内核管理的，我们不能够操作线程的执行，但是我们可以修改线程的优先级，这样，内核就会优先分配线程给我们线程优先级高的线程执行</p>
<p>在Operation中有个属性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS, introduced: <span class="number">4.0</span>, deprecated: <span class="number">8.0</span>)</div><div class="line">open <span class="keyword">var</span> threadPriority: <span class="type">Double</span></div></pre></td></tr></table></figure>
<p>可以设置他的值从0.0到1.0  默认值为0.5</p>
<p><strong>思考</strong></p>
<p>这里，我们思考一个问题，如果这个operation是我们自定义的一个并发operation，那么它的线程是我们自己在start方法中启动的，因为我们没有调用super的start方法，所以这个线程的优先级就需要我们自己在start方法中，手动设置了。</p>
<h3 id="设置-Completion-Block"><a href="#设置-Completion-Block" class="headerlink" title="设置 Completion Block"></a>设置 Completion Block</h3><p>我们还是通过一段代码来分析</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> blockOp1 = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(Thread.main)--1--\(Thread.current)"</span>)</div><div class="line">    sleep(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="keyword">let</span> blockOp2 = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(Thread.main)--2--\(Thread.current)"</span>)</div><div class="line">    sleep(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">blockOp2.completionBlock = &#123;</div><div class="line">    <span class="keyword">if</span> blockOp2.isCancelled &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"取消了"</span>);</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"blockOp2执行完成"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">    </div><div class="line"><span class="keyword">let</span> blockOp3 = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(Thread.main)--3--\(Thread.current)"</span>)</div><div class="line">    sleep(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">blockOp2.addDependency(blockOp1)</div><div class="line">blockOp3.addDependency(blockOp2)</div><div class="line">myQueue.addOperation(blockOp1)</div><div class="line">myQueue.addOperation(blockOp2)</div><div class="line">myQueue.addOperation(blockOp3)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">//在两秒后将blockOp2取消掉，看看会出现什么情况</span></div><div class="line"><span class="keyword">let</span> delayQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"com.ppsheep.delayqueue"</span>, qos: .userInitiated)</div><div class="line"><span class="keyword">let</span> additionalTime: <span class="type">DispatchTimeInterval</span> = .seconds(<span class="number">2</span>)</div><div class="line">delayQueue.asyncAfter(deadline: .now()+additionalTime) &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"开始取消blockOp2"</span>)</div><div class="line">    blockOp2.cancel()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码，是我将三个operation分别添加到一个qoeue中，并且，我将blockOp2设置了completionBlock</p>
<p>看看输出</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="type">NSThread</span>: <span class="number">0x60000007a100</span>&gt;&#123;number = <span class="number">1</span>, name = (null)&#125;--<span class="number">1</span>--&lt;<span class="type">NSThread</span>: <span class="number">0x60800026d140</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;</div><div class="line">开始取消blockOp2</div><div class="line">取消了</div><div class="line">&lt;<span class="type">NSThread</span>: <span class="number">0x60000007a100</span>&gt;&#123;number = <span class="number">1</span>, name = (null)&#125;--<span class="number">3</span>--&lt;<span class="type">NSThread</span>: <span class="number">0x608000276500</span>&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div></pre></td></tr></table></figure>
<p>通过上面的输出，我们可以总结几点</p>
<ul>
<li>不管是operation是否取消，他的completionBlock都会执行，所以我们在执行completionBlock的时候需要检查一下他是否已经被取消了</li>
<li>三个operation互相之间设置了依赖，当blockOp2被取消时，blockOp3并没有影响执行，所以这里也可以看出，当依赖之间的operation取消时，并不会影响其他operation的执行</li>
</ul>
<p><strong>注意</strong></p>
<p>这里还有一点需要注意，一般来说，我们的completionBlock回调线程都是和发起start或者queue的同一线程，所以如果是需要更新UI，最好在completionBlock中，使用GCD，扔到主线程来执行</p>
<p>关于Operation Queues的我们需要了解的知识，大概已经讲完了，在我们日常的使用中，上面讲到的应该已经够用了</p>
<p>参考：<br><a href="https://www.objccn.io/issue-2-3/" target="_blank" rel="external">https://www.objccn.io/issue-2-3/</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p>上边是公众号，下边是我个人微信</p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br>    <image src="http://o8bxt3lx0.bkt.clouddn.com/avatar.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发、异步在我们的编程中，见到的太多了。在iOS中，实现并发的主要三个途径Operation Queues、Dispatch Queues、Dispatch Sources，今天我们就来详细介绍Operatin Queues的使用，花了两天时间写这一篇，值得一看。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS中的并发编程" scheme="http://ppsheep.com/all-categories/iOS%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Operation Queues" scheme="http://ppsheep.com/all-tags/Operation-Queues/"/>
    
  </entry>
  
  <entry>
    <title>理解OC内部的消息调用、消息转发、类和对象-二</title>
    <link href="http://ppsheep.com/2017/03/13/%E7%90%86%E8%A7%A3OC%E5%86%85%E9%83%A8%E7%9A%84%E6%B6%88%E6%81%AF%E8%B0%83%E7%94%A8%E3%80%81%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E3%80%81%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-%E4%BA%8C/"/>
    <id>http://ppsheep.com/2017/03/13/理解OC内部的消息调用、消息转发、类和对象-二/</id>
    <published>2017-03-13T03:17:49.000Z</published>
    <updated>2017-03-13T07:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们讲了关于OC消息转发，类和对象的内部实现的一些原理，现在我们接着讲，关于消息转发过程中的另外几个过程，将消息转发给其他对象处理，另外还有类方法的动态添加。</p>
<a id="more"></a>
<h3 id="消息传递给其他对象"><a href="#消息传递给其他对象" class="headerlink" title="消息传递给其他对象"></a>消息传递给其他对象</h3><p>首先，我创建一个我自己的对象PPSMyObject，这个对象中有一个方法logMyInfo，然后我在我们的viewcontroller中来执行这个方法，当然VC里面是没有这个方法的，我肯定需要将这个方法传递给PPSMyObject来处理</p>
<h3 id="forwardingTargetForSelector"><a href="#forwardingTargetForSelector" class="headerlink" title="forwardingTargetForSelector:"></a>forwardingTargetForSelector:</h3><p>首先，我们在方法forwardingTargetForSelector:中来处理</p>
<p>PPSMyObject这个对象很简单，就只有一个方法logMyInfo，而且这个方法是在实现文件中，没有在头文件中声明，大家可以思考一下，消息转发为什么能够直接到实现文件中的方法呢？</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"PPSMyObject.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PPSMyObject</span></span></div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)logMyInfo&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"myInfo"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>然后在VC中，我们来执行消息转发，同样执行这个不存在的方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(logMyInfo)];</div></pre></td></tr></table></figure>
<p>然后在方法forwardingTargetForSelector:中，将这个方法抛给PPSMyObject来处理</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector&#123;</div><div class="line">    <span class="keyword">if</span> (aSelector == <span class="keyword">@selector</span>(logMyInfo)) &#123;</div><div class="line">        PPSMyObject *myObject = [[PPSMyObject alloc] init];</div><div class="line">        <span class="keyword">return</span> myObject;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"forwardingTargetForSelector"</span>);</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行后的效果，想想也应该清楚，程序没有崩溃，直接将这个消息传递给了PPSMyObject来处理</p>
<p>除了这一步，我们还有最后一步来处理</p>
<h3 id="methodSignatureForSelector-amp-forwardInvocation"><a href="#methodSignatureForSelector-amp-forwardInvocation" class="headerlink" title="methodSignatureForSelector: &amp; forwardInvocation:"></a>methodSignatureForSelector: &amp; forwardInvocation:</h3><p>通过这两个方法也能最后实现消息的转发</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"methodSignatureForSelector"</span>);</div><div class="line">    <span class="built_in">NSMethodSignature</span> *signature = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</div><div class="line">    <span class="keyword">if</span> (!signature) &#123;</div><div class="line">        <span class="keyword">if</span> ([PPSMyObject instancesRespondToSelector:aSelector]) &#123;</div><div class="line">            signature = [PPSMyObject instanceMethodSignatureForSelector:aSelector];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> signature;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在此方法中，找到如果PPSMyObject中能够找到方法aSelector，那么就将方法使用PPSMyObject签名</p>
<p>然后在方法forwardInvocation:中，NSInvocation封装了所有的该消息的实现细节，在此方法中实现方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"forwardInvocation"</span>);</div><div class="line">    <span class="keyword">if</span> ([PPSMyObject instancesRespondToSelector:anInvocation.selector]) &#123;</div><div class="line">        [anInvocation invokeWithTarget:[[PPSMyObject alloc] init]];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就使用了两种方法，来实现消息的传递</p>
<h3 id="类方法的动态添加"><a href="#类方法的动态添加" class="headerlink" title="类方法的动态添加"></a>类方法的动态添加</h3><p>关于类方法的消息转发流程，我查了很久，但是目前也只是查到了在方法resolveClassMethod:中来处理，其他的转发流程我都没有找到，如果有同学了解的，请分享一下</p>
<p>我们之前说了一句，添加一个实例方法，其实是在类中增加一个方法，那么添加一个类方法，就应该是在元类中增加一个方法，因为我们之前讲了类对象其实是一个元类的实例，类比就能够理解到其中的原理</p>
<p>我们还是来看代码吧，一目了然</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ViewController <span class="keyword">class</span>] performSelector:<span class="keyword">@selector</span>(logClassMethod)];</div></pre></td></tr></table></figure>
<p>在类中，我执行一个类方法，在这里其实我们可以再聊一下类对象。在方法performSelector:，我们查一下这个其实是一个NSObject的实例方法，那么就说明[ViewController class]返回的是一个实例，我们再去Runtime的开源中看一下这个class方法，在Object.mm文件中这个方法是这样的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>)<span class="keyword">class</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回的是自己  self  这里更是说明了ViewController其实是一个对象实例</p>
<p>好，回过头来，我们接着讲</p>
<p>调用了logClassMethod:方法，但是类中没有这个类方法，在resolveClassMethod:来动态增加</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 处理类方法</div><div class="line"></div><div class="line"> @param sel 需要动态添加的方法 @return 是否已经有可实现的方法</div><div class="line"> */</div><div class="line">+(<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel&#123;</div><div class="line">    Class metaClass = objc_getMetaClass(class_getName(<span class="keyword">self</span>));</div><div class="line">    IMP imp = [<span class="keyword">self</span> instanceMethodForSelector:<span class="keyword">@selector</span>(myClassMethod)];</div><div class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(logClassMethod)) &#123;</div><div class="line">        class_addMethod(metaClass, sel,imp , <span class="string">"v@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)myClassMethod&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"我的动态类方法"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，就能够正常实现了</p>
<p>源代码同样的 </p>
<p><a href="https://github.com/yangqian111/Objective-C-Runtime" target="_blank" rel="external">https://github.com/yangqian111/Objective-C-Runtime</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p>上边是公众号，下边是我个人微信</p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br>    <image src="http://o8bxt3lx0.bkt.clouddn.com/avatar.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我们讲了关于OC消息转发，类和对象的内部实现的一些原理，现在我们接着讲，关于消息转发过程中的另外几个过程，将消息转发给其他对象处理，另外还有类方法的动态添加。&lt;/p&gt;
    
    </summary>
    
      <category term="Runtime" scheme="http://ppsheep.com/all-categories/Runtime/"/>
    
    
      <category term="Runtime" scheme="http://ppsheep.com/all-tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>理解OC内部的消息调用、消息转发、类和对象(一)</title>
    <link href="http://ppsheep.com/2017/03/09/%E7%90%86%E8%A7%A3OC%E5%86%85%E9%83%A8%E7%9A%84%E6%B6%88%E6%81%AF%E8%B0%83%E7%94%A8%E3%80%81%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E3%80%81%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-%E4%B8%80/"/>
    <id>http://ppsheep.com/2017/03/09/理解OC内部的消息调用、消息转发、类和对象-一/</id>
    <published>2017-03-09T02:28:35.000Z</published>
    <updated>2017-03-13T03:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前看过Effective Objective-C 2.0 这本书的同学可能会注意到，我之前写的关于这本书的笔记，跳过了其中的几个章节，那时候没有记下来，是觉得我自己还没有理解到位，还不能贸然瞎说，最近仔细研究了一下，还看了Runtime和Runloop，渐渐的开始理解这些东西了，现在慢慢开始记录一下，大家一起学习。</p>
<a id="more"></a>
<h3 id="对象的方法调用objc-msgSend"><a href="#对象的方法调用objc-msgSend" class="headerlink" title="对象的方法调用objc_msgSend"></a>对象的方法调用objc_msgSend</h3><p>之前已经讲过了消息派发，我决定呢将这个放在这篇文章里来，这样一起看整个一个OC的运行期进行的一些操作，理解起来也会有益处的。</p>
<p>在对象实例上调用方法是Objective-C常用的功能。用Objc的术语来讲，叫做“传递消息”。消息有“名称(name)”或“选择子(selector)”，可以接受参数，可以有返回值。</p>
<p>由于OC是C的超集，所以最好先理解C语言的函数调用方式。C语言使用“静态绑定”，也就是说，在编译期间，就能够知道所应该调用的函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">void printHello()&#123;</div><div class="line">    printf(&quot;Hello world\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void printGoodBye()&#123;</div><div class="line">    printf(&quot;Goodbye world\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void doTheThing(int type)&#123;</div><div class="line">    if (type == 0) &#123;</div><div class="line">        printHello();</div><div class="line">    &#125;else&#123;</div><div class="line">        printGoodBye();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不考虑内联关系，那么编译器在编译代码的时候就已经知道了程序中有printHello和printGoodBye这两个函数了，如果我们将编写的方式改变一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">void printHello()&#123;</div><div class="line">    printf(&quot;Hello world\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void printGoodBye()&#123;</div><div class="line">    printf(&quot;Goodbye world\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void doTheThing(int type)&#123;</div><div class="line">    void (*fnc)();</div><div class="line">    if (type == 0) &#123;</div><div class="line">        fnc = printHello;</div><div class="line">    &#125;else&#123;</div><div class="line">        fnc = printGoodBye;</div><div class="line">    &#125;</div><div class="line">    fnc();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这下，就必须要使用动态绑定了，因为需要调用的函数，在运行期间才能够知道。在objc中，要向对象传递消息，就必须要使用到动态绑定的机制来决定需要调用的方法。</p>
<p>给对象传递消息，可以这样写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id returnValue = [someObject messageName:parameter];</div></pre></td></tr></table></figure>
<p>在上面代码中，someObject叫做接收者，messageName叫做选择子，选择子和参数合起来叫做消息。编译器在看到该消息后，将其转化成为一条标准的C语言函数调用，所调用的函数叫做objc_msgSend，其原型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void objc_msgSend(id self,SEL cmd,...)</div></pre></td></tr></table></figure>
<p>这是一个参数可变的函数，其中第一个参数代表的是接收者，第二个代表的是选择子，第三个以及后面的代表的是参数，编译器会把上面的传递消息的例子改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">id returnValue = objc_msgSend(someObject,@selector(messageName:),</div><div class="line">									parameter);</div></pre></td></tr></table></figure>
<p>objc_msgSend函数会根据接收者和选择子来选择调用的方法，改函数会在接收者的类中寻找方法列表，如果能找到与选择子名称相符的方法，就跳至其，实现代码，如果找不到，那就继续沿着继承体系往上找，如果最终还是找不到方法，那么就会执行”消息转发“操作</p>
<p>这样看来，好像我们调用一个方法需要很多步骤，所幸的是，objc_msgSend会将匹配结果缓存子啊一张快速映射表中，我们在之后会讲到这个缓存。这样一来，每个类都会有一个缓存，这样虽然第一次执行起来会稍慢，但是后面就会很迅速了。</p>
<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>要讲消息转发机制，首先我们需要先了了解一下OC中的类和对象，OC的runtime是开源的，我们可以先从这里下载到源码，对着源码来看</p>
<p><a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">https://opensource.apple.com/tarballs/objc4/</a></p>
<p>首先，我们来看一下类和对象的定义，在objc.h文件和runtime.h文件中分别定义了对象和类</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents an Objective-C class.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div><div class="line"></div><div class="line"><span class="comment">/// Represents an instance of a class.</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/// A pointer to an instance of a class.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *id;</div></pre></td></tr></table></figure>
<p>从上面的代码中，我们可以看出，在OC中id代表的是一个OC对象，Class代表的是OC中的一个类。在对象定义中，首地址是一个*isa的struct的指针。这个指针指向对象所代表的类(Class)。</p>
<p>我们再来看看类的定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></div><div class="line">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div><div class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></div></pre></td></tr></table></figure>
<p>我们先抛开其他的不看，一眼就看到了类的首地址也是一个*isa的指针，这个就说明，其实类他也是一个对象，也是指向了一个类，这样一想，其实也是合理的，在OC中，一切皆是对象，类当然也除外，那这个类对象是属于什么类的呢？</p>
<p>其实在OC中，还有一个meta-class的概念，一般把它叫做元类，我们上面说到的类，其实就是元类的一个实例，这里有点拗口，但是这个感念一定要清楚，那之前说的OC一切皆是对象，那元类也应该是一个实例，他也应该指向一个类，说的没错，我们来看一下OC中的类的继承图就清楚了</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-03-10-080312.jpg" alt=""></p>
<p>上面是我画的一个继承图，在图中，我们能够看出，所有的类都是继承自NSObject，NSObject的父类为nil，所有的类都是元类的实例，然后根元类，即是NSObject的元类，他的父类是NSObject，然后他自己是自己的实例，这样一来就形成了一个循环，正好OC  一切皆是对象。</p>
<p>当然，在我们平时开发中，基本不会接触到元类。但是我们也需要了解其中的具体原理。</p>
<p>我们再看看上面的类定义，其中还有其他的结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Class super_class                                        OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<p>这其中包含了这个类的所有信息，其中我们常用到的就是属性列表，方法列表，还有实现的协议列表，其中有个cache，这个其实就是我们上面说到的快速缓存表，关于其中的属性列表和方法列表之类的，我在之前的一篇文章中提到过这些的应用，请移步<br> <a href="http://ppsheep.com/2016/07/25/Runtime详解/">http://ppsheep.com/2016/07/25/Runtime详解/</a></p>
<h3 id="理解消息转发机制"><a href="#理解消息转发机制" class="headerlink" title="理解消息转发机制"></a>理解消息转发机制</h3><p>好，现在我们开始来讲一下消息转发，首先我们来看实例的消息转发，这里说的消息转发，其实是方法的调用，我们上面已经讲过了。<br>先来看例子</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首先我在VC里执行一个不存在的方法</span></div><div class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(logInstanceMethod)];</div></pre></td></tr></table></figure>
<p>这里需要说明一下，因为现在项目基本都会使用ARC，如果使用了ARC，那么如果我们直接像平时调用方法那样调用一个不存在的方法，编译器会报错，因为ARC其实是在我们编译阶段，插入了内存管理的代码，在运行期间，是没有ARC的，这个和Java就不一样了。没有方法，当然没办法进行引用计数，所以，编译会报错，但是使用performSelector，这个方法，我的理解是在运行期间，才会知道是否有这样一个方法，这个方法定义出来，就是为了runtime实现的。如果有同学详细了解过，麻烦告知一下。</p>
<p>然后我们在VC里面实现几个方法，这几个方法都在NSObject头文件中有声明</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"forwardingTargetForSelector"</span>);</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"forwardInvocation"</span>);</div><div class="line"><span class="comment">//    [super forwardInvocation:anInvocation];</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">+(<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"resolveInstanceMethod"</span>);</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"methodSignatureForSelector"</span>);</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:aSelector]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">NSMethodSignature</span> signatureWithObjCTypes:<span class="string">"v@:"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先不做解释，我们运行一下，看看效果怎么样</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">32.265</span> 动态添加实例方法和类方法[<span class="number">29490</span>:<span class="number">5570176</span>] resolveInstanceMethod</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">32.267</span> 动态添加实例方法和类方法[<span class="number">29490</span>:<span class="number">5570176</span>] forwardingTargetForSelector</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">32.267</span> 动态添加实例方法和类方法[<span class="number">29490</span>:<span class="number">5570176</span>] methodSignatureForSelector</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">32.268</span> 动态添加实例方法和类方法[<span class="number">29490</span>:<span class="number">5570176</span>] forwardInvocation</div></pre></td></tr></table></figure>
<p>程序并没有崩溃，而是有先后顺序调用了这几个方法，这里需要说明，如果使用storyBoard的同学，resolveInstanceMethod会调用两次，因为这个初始化是，会调用一个方法叫做 setStoryBoard，这个方法，需要在父类中才会处理，在当前是找不到的，所以会直接来调用。</p>
<p>好，来分析一下：</p>
<p>消息转发大致分为两个阶段：</p>
<ul>
<li>阶段一  动态方法解析：首先会先问当前类能否动态增加方法，来处理这个不能被处理的消息，这时候就会调用到方法resolveInstanceMethod:，在这个方法中，我们可以进行动态增加方法，来处理这个实例不能处理的方法，如果当前类不能够动态增加方法，那么直接返回NO，这时候就进入第二个阶段，完整的消息转发</li>
<li>阶段二 完整消息转发：完整消息转发也分为几步   首先，类已经不能动态增加方法了，那么就需要找其他能够处理的类来处理这个方法，如果有其他对象能够处理这个消息，那么直接将这个消息发送给他，进行消息处理。如果没有找到能够处理的对象，那么进行第二步，到方法签名，然后将消息的所有细节全部封装到NSInvocation对象，进行最后的处理，如果还未能处理，那么将会调用到NSObject的doesNotRecgnized什么方法，不知道拼的对不对，意思就是没找到这个方法，然后崩溃。</li>
</ul>
<p>大致的一个流程就是这样，也对应到我们的方法调用，这里为什么我们的没有崩溃呢，因为在forwardInvocation上，我没有调用super，这样就不会到NSObject的方法了</p>
<p>上面就是一个消息转发的全过程，接下来我们来讲动态增加实例方法。</p>
<h3 id="动态增加实例方法"><a href="#动态增加实例方法" class="headerlink" title="动态增加实例方法"></a>动态增加实例方法</h3><p>上面，我们讲了，动态增加实例方法，都是在resolveInstanceMethod方法中，那么我们来增加试试看</p>
<p>首先，我先自定义一个实例方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)myInstanceMethod&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"我的实例方法"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，我在动态解析方法时，将执行的logInstanceMethod，换成我的这个方法myInstanceMethod</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 处理实例方法</div><div class="line"></div><div class="line"> @param sel 需要动态添加的方法</div><div class="line"> @return 是否已经有可实现的方法</div><div class="line"> */</div><div class="line">+(<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"resolveInstanceMethod"</span>);</div><div class="line">    IMP imp = [<span class="keyword">self</span> instanceMethodForSelector:<span class="keyword">@selector</span>(myInstanceMethod)];</div><div class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(logInstanceMethod)) &#123;</div><div class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, imp, <span class="string">"v@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)myInstanceMethod&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"我的实例方法"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中class_addMethod有四个参数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">OBJC_EXPORT BOOL <span class="title">class_addMethod</span><span class="params">(Class cls, SEL name, IMP imp, </span></span></div><div class="line">                                 <span class="keyword">const</span> <span class="keyword">char</span> *types) </div><div class="line">    <span class="title">OBJC_AVAILABLE</span><span class="params">(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>)</span>;</div></pre></td></tr></table></figure>
<p>分别代表的含义是  需要给哪个类增加方法，增加的方法的名称，具体实现的方法地址，方法的返回值和参数</p>
<p>这里解释一下，关于方法的返回值和参数，是通过字符串来表示的，具体的，可以看一下这里 </p>
<p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100</a></p>
<p>这样，我们就给我们当前的类增加了一个名为logInstanceMethod的方法，他的实现，则是在方法myInstanceMethod里</p>
<p>这里需要注意一点，我们传Class的时候，传的是 [self class]，这个返回的是当前实例所属的对象，后面我们再讲动态增加类方法的时候，还需要传一个，那就是meta-class，到时候我在讲，这里只是提一下，注意两者之间的区别</p>
<p>我们再来运行一下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">31</span>:<span class="number">49.298</span> 动态添加实例方法和类方法[<span class="number">31090</span>:<span class="number">5856225</span>] resolveInstanceMethod</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">31</span>:<span class="number">49.299</span> 动态添加实例方法和类方法[<span class="number">31090</span>:<span class="number">5856225</span>] 我的实例方法</div></pre></td></tr></table></figure>
<p>这里可以看到，到了动态解析，消息转发就已经完成了，并且，我们的方法，动态添加了进去</p>
<p>好今天，先讲到这里，消化一下，说的有点多，后面一篇文章，我将会讲到，将消息转发给其他对象处理，还有动态增加类方法。</p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p>上边是公众号，下边是我个人微信</p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br>    <image src="http://o8bxt3lx0.bkt.clouddn.com/avatar.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看过Effective Objective-C 2.0 这本书的同学可能会注意到，我之前写的关于这本书的笔记，跳过了其中的几个章节，那时候没有记下来，是觉得我自己还没有理解到位，还不能贸然瞎说，最近仔细研究了一下，还看了Runtime和Runloop，渐渐的开始理解这些东西了，现在慢慢开始记录一下，大家一起学习。&lt;/p&gt;
    
    </summary>
    
      <category term="Runtime" scheme="http://ppsheep.com/all-categories/Runtime/"/>
    
    
      <category term="Runtime" scheme="http://ppsheep.com/all-tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>自定义模态loading</title>
    <link href="http://ppsheep.com/2017/02/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%80%81loading/"/>
    <id>http://ppsheep.com/2017/02/24/自定义模态loading/</id>
    <published>2017-02-24T06:49:01.000Z</published>
    <updated>2017-02-24T07:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天带来一款自定义的模态loading的实现，通过自定义UI，画出loading的样式，并且有个转动的样式，下面我们就来实现以下。</p>
<a id="more"></a>
<p>首先，我们来看一下效果，可能图片看着有点卡看一下大致的效果</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-%E6%A8%A1%E6%80%81loading.gif" alt=""></p>
<p>首先来分析以下，做动画都是先分析，再来下手</p>
<ul>
<li>首先底部是一个毛玻璃样式，图片上看不大清楚</li>
<li>然后两个圆，第一个是底部的灰色圆环</li>
<li>第二个圆是一个跑动的圆弧，这个怎么做呢，其实它也是一个圆环，只是起点和终点在不停变换，而这个变换，我们可以通过layer的动画做到</li>
<li>最小面还有一个label</li>
</ul>
<p>好了就这些，没了，看起来还是很简单的</p>
<h3 id="底部毛玻璃样式"><a href="#底部毛玻璃样式" class="headerlink" title="底部毛玻璃样式"></a>底部毛玻璃样式</h3><p>首先我们来讲底部的毛玻璃效果加上，在系统提供的UIKit中，我们就可以简单实现这种小效果，有一个类UIVisualEffectView，可以用来实现很多特殊效果</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">blurView = [[<span class="built_in">UIVisualEffectView</span> alloc] initWithEffect:[<span class="built_in">UIBlurEffect</span> effectWithStyle:<span class="built_in">UIBlurEffectStyleExtraLight</span>]];</div><div class="line">blurView.layer.cornerRadius = <span class="number">10</span>;</div><div class="line">blurView.layer.masksToBounds = <span class="literal">YES</span>;</div><div class="line">blurView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">blurView.center = <span class="built_in">CGPointMake</span>(viewCenterX, viewCenterY);</div></pre></td></tr></table></figure>
<p>这样几句简单的代码，就已经有了毛玻璃效果</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-071550.jpg" alt=""></p>
<p>应该还是能够看出来的</p>
<h3 id="底部圆环"><a href="#底部圆环" class="headerlink" title="底部圆环"></a>底部圆环</h3><p>接下来我们来画底部的圆环，画圆的方式有很多，这里我就通过CAShapeLayer来画圆</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/// 底部的灰色layer</span></div><div class="line"><span class="built_in">CAShapeLayer</span> *bottomShapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">bottomShapeLayer.strokeColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">229</span>/<span class="number">255.0</span> green:<span class="number">229</span>/<span class="number">255.0</span> blue:<span class="number">229</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>].CGColor;</div><div class="line">bottomShapeLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">bottomShapeLayer.lineWidth = KShapelayerLineWidth;</div><div class="line">bottomShapeLayer.path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(KShapeLayerMargin, <span class="number">0</span>, KShapeLayerWidth, KShapeLayerWidth) cornerRadius:KShapeLayerRadius].CGPath;</div><div class="line">[<span class="keyword">self</span>.layer addSublayer:bottomShapeLayer];</div></pre></td></tr></table></figure>
<p>还是来看效果图</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-071712.jpg" alt=""></p>
<p>灰色的圆，我们已经画出来了，关于画圆的代码，我就不具体解释了，就是一个简单的UIBezierPath应用，不了解的，可以去点进源码看看，就是给定一个曲线，然后画图</p>
<h3 id="运动的圆环"><a href="#运动的圆环" class="headerlink" title="运动的圆环"></a>运动的圆环</h3><p>接下来，接着画中间的红色圆环，这里可能有的同学会走偏，其实这个运动的动画，如果对动画理解不多，很容易想到去画圆弧去了，其实这里它也是一个完整的圆，只是对它的起点和终点做了动画，所以看起来就是运动着的圆弧</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 橘黄色的layer</span></div><div class="line"><span class="keyword">self</span>.ovalShapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line"><span class="keyword">self</span>.ovalShapeLayer.strokeColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.984</span> green:<span class="number">0.153</span> blue:<span class="number">0.039</span> alpha:<span class="number">1.000</span>].CGColor;</div><div class="line"><span class="keyword">self</span>.ovalShapeLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line"><span class="keyword">self</span>.ovalShapeLayer.lineWidth = KShapelayerLineWidth;</div><div class="line"><span class="keyword">self</span>.ovalShapeLayer.path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(KShapeLayerMargin, <span class="number">0</span>,KShapeLayerWidth, KShapeLayerWidth) cornerRadius:KShapeLayerRadius].CGPath;</div><div class="line">[<span class="keyword">self</span>.layer addSublayer:<span class="keyword">self</span>.ovalShapeLayer];</div></pre></td></tr></table></figure>
<p>来看看效果图</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-072259.jpg" alt=""></p>
<p>现在，中间的红色圆环，已经完全把灰色的圆遮住了，好进入重要的步骤，做动画</p>
<p>我们来细看一下这个动画，在整个圆的前半部分，终点的运动速度很快，起点的速度运动很慢，然后当终点走到了圆的一半，起点着急了，加快了速度，最后在整个圆的位置追上了终点点，这就是整个动画的要点</p>
<p>所以这个动画要分两步，前半部分和后半部分，我们先来做前半部分</p>
<p>要让起点和终点的速度不一样，那就是在相同的时间内，运动的弧度不同了</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 起点动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> * strokeStartAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeStart"</span>];</div><div class="line">strokeStartAnimation.fromValue = @(<span class="number">0.0</span>);</div><div class="line">strokeStartAnimation.toValue = @(<span class="number">0.25</span>);</div><div class="line">    </div><div class="line"><span class="comment">/// 终点动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> * strokeEndAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">strokeEndAnimation.fromValue = @(<span class="number">0.0</span>);</div><div class="line">strokeEndAnimation.toValue = @(<span class="number">0.5</span>);</div><div class="line">    </div><div class="line"><span class="comment">/// 组合动画</span></div><div class="line"><span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">animationGroup.animations = @[strokeStartAnimation,strokeEndAnimation];</div><div class="line">animationGroup.duration = KAnimationDurationTime;</div><div class="line">animationGroup.repeatCount = <span class="number">1</span>;</div><div class="line">animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">[<span class="keyword">self</span>.ovalShapeLayer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>解释一下，在相同时间内，起点走了0.25个弧度，终点走了0.5个弧度，那这个动画组的动画就正好是我们说的前半部分  来看看效果</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-%E6%A8%A1%E6%80%81loading1.gif" alt=""></p>
<p>正好是我们想要的结果，再来做，下半部分动画，同样的，后面的动画就反过来了</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CABasicAnimation</span> * strokeStartAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeStart"</span>];</div><div class="line">strokeStartAnimation.fromValue = @(<span class="number">0.25</span>);</div><div class="line">strokeStartAnimation.toValue = @(<span class="number">1.0</span>);</div><div class="line">    </div><div class="line"><span class="comment">/// 终点动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> * strokeEndAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">strokeEndAnimation.fromValue = @(<span class="number">0.5</span>);</div><div class="line">strokeEndAnimation.toValue = @(<span class="number">1.0</span>);</div><div class="line">    </div><div class="line"><span class="comment">/// 组合动画</span></div><div class="line"><span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">animationGroup.animations = @[strokeStartAnimation,strokeEndAnimation];</div><div class="line">animationGroup.duration = KAnimationDurationTime;</div><div class="line">animationGroup.repeatCount = <span class="number">1</span>;</div><div class="line">animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">[<span class="keyword">self</span>.ovalShapeLayer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>同样的 看看效果图</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-%E6%A8%A1%E6%80%81loading2.gif" alt=""></p>
<p>这个效果也达到了，好了现在，我们要做的，就是将两个动画组合起来，我们在第一组动画结束时，再执行第二组动画，通过GCD来做</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.9</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;&#125;);</div></pre></td></tr></table></figure>
<p>在第一组动画开始执行时，第二组动画延时第一组动画执行的时间，再执行，注意为了两组动画衔接流畅，做了一点时间的调整</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)animations&#123;</div><div class="line">    <span class="comment">/// 起点动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> * strokeStartAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeStart"</span>];</div><div class="line">    strokeStartAnimation.fromValue = @(<span class="number">0.0</span>);</div><div class="line">    strokeStartAnimation.toValue = @(<span class="number">0.25</span>);</div><div class="line">    </div><div class="line">    <span class="comment">/// 终点动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> * strokeEndAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">    strokeEndAnimation.fromValue = @(<span class="number">0.0</span>);</div><div class="line">    strokeEndAnimation.toValue = @(<span class="number">0.5</span>);</div><div class="line">    </div><div class="line">    <span class="comment">/// 组合动画</span></div><div class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">    animationGroup.animations = @[strokeStartAnimation,strokeEndAnimation];</div><div class="line">    animationGroup.duration = KAnimationDurationTime;</div><div class="line">    animationGroup.repeatCount = <span class="number">1</span>;</div><div class="line">    animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">    animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span>.ovalShapeLayer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.9</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="comment">/// 起点动画</span></div><div class="line">        <span class="built_in">CABasicAnimation</span> * strokeStartAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeStart"</span>];</div><div class="line">        strokeStartAnimation.fromValue = @(<span class="number">0.25</span>);</div><div class="line">        strokeStartAnimation.toValue = @(<span class="number">1.0</span>);</div><div class="line">        </div><div class="line">        <span class="comment">/// 终点动画</span></div><div class="line">        <span class="built_in">CABasicAnimation</span> * strokeEndAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">        strokeEndAnimation.fromValue = @(<span class="number">0.5</span>);</div><div class="line">        strokeEndAnimation.toValue = @(<span class="number">1.0</span>);</div><div class="line">        </div><div class="line">        <span class="comment">/// 组合动画</span></div><div class="line">        <span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">        animationGroup.animations = @[strokeStartAnimation,strokeEndAnimation];</div><div class="line">        animationGroup.duration = KAnimationDurationTime;</div><div class="line">        animationGroup.repeatCount = <span class="number">1</span>;</div><div class="line">        animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">        animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span>.ovalShapeLayer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样得到的效果，就是一次执行load的动画</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-%E6%A8%A1%E6%80%81loading3.gif" alt=""></p>
<p>我们想要重复执行，在这里我使用了timer</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">2.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(animations) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">[<span class="keyword">self</span>.timer fire];</div></pre></td></tr></table></figure>
<p>这下就可以重复执行了</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-24-%E6%A8%A1%E6%80%81loading4.gif" alt=""></p>
<p>至于label的添加，我就不写出来了，这个就很简单了，同样的源代码，放上去</p>
<p><a href="https://github.com/yangqian111/LoadingView" target="_blank" rel="external">https://github.com/yangqian111/LoadingView</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p>上边是公众号，下边是我个人微信</p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br>    <image src="http://o8bxt3lx0.bkt.clouddn.com/avatar.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天带来一款自定义的模态loading的实现，通过自定义UI，画出loading的样式，并且有个转动的样式，下面我们就来实现以下。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/"/>
    
      <category term="UI小组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/UI%E5%B0%8F%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="模态loading" scheme="http://ppsheep.com/all-tags/%E6%A8%A1%E6%80%81loading/"/>
    
  </entry>
  
  <entry>
    <title>iOS下载速度测试</title>
    <link href="http://ppsheep.com/2017/02/21/iOS%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/"/>
    <id>http://ppsheep.com/2017/02/21/iOS下载速度测试/</id>
    <published>2017-02-21T06:03:50.000Z</published>
    <updated>2017-02-21T07:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天分享一个下载速度测试的方法，很多APP都有测试网络延迟，测试下载上传速度。之前测试网络延迟的ping我们已经说过了，今天再来讲讲下载速度测试的办法。</p>
<a id="more"></a>
<h3 id="基本想法"><a href="#基本想法" class="headerlink" title="基本想法"></a>基本想法</h3><p>下载上传速度的测试，我的想法是下载一个静态资源，然后计算他的速度，这里使用AF来做下载，当然原生的NSURLSession也是一样的，为了方便，我就直接使用AF了</p>
<p>去百度上找一个静态资源：</p>
<p><a href="http://sw.bos.baidu.com/sw-search-sp/software/d28b12c330f7b/android-studio-bundle_2.2.0.0.exe" target="_blank" rel="external">http://sw.bos.baidu.com/sw-search-sp/software/d28b12c330f7b/android-studio-bundle_2.2.0.0.exe</a></p>
<p>Android studion </p>
<p>新建一个类，用于速度的测试PPSNetSpeedTest</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^NetSpeedBlock)(<span class="built_in">NSString</span> *speed);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PPSNetSpeedTest</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 下载网速测试</div><div class="line"> </div><div class="line"> @param callBackBlock 每秒回调，用于实时回传网速</div><div class="line"> @param completeBlock 最后测试完成，回调平均网速</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)startDownLoadTestWithCallBlock:(NetSpeedBlock)callBackBlock completeBlock:(NetSpeedBlock)completeBlock;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>其中的NetSpeedBlock是每次速度的回调</p>
<p>方法startDownLoadTestWithCallBlock:completeBlock:分别回传了每秒的下载速度和最后的平均速度</p>
<p>在实现方法里</p>
<p>说一下，我计算每秒下载速度的思路，在AF中，有一个下载的NSProgress，在progress中有这个文件的总大小，和当前下载的大小，我进行一个timer重复操作，每秒执行一个方法，来计算速度，在每次下载progress更新的时候，我都记录上了当前完成的文件大小，然后在计算的时候，来计算这一秒下载多少文件，那就是速度了。</p>
<p>说太多，我上代码吧</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startDownLoadTestWithCallBlock:(NetSpeedBlock)callBackBlock completeBlock:(NetSpeedBlock)completeBlock&#123;</div><div class="line">    <span class="keyword">self</span>.callBackBlock = callBackBlock;</div><div class="line">    <span class="keyword">self</span>.completeBlock = completeBlock;</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:FILE_PATH]];</div><div class="line">    <span class="keyword">self</span>.downloadTask = [_urlManager downloadTaskWithRequest:request progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</div><div class="line">        _completeFile = downloadProgress.completedUnitCount;</div><div class="line">    &#125; destination:^<span class="built_in">NSURL</span> * _Nonnull(<span class="built_in">NSURL</span> * _Nonnull targetPath, <span class="built_in">NSURLResponse</span> * _Nonnull response) &#123;</div><div class="line">        <span class="built_in">NSURL</span> *downloadURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</div><div class="line">        <span class="keyword">return</span> [downloadURL URLByAppendingPathComponent:[response suggestedFilename]];</div><div class="line">    &#125; completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="built_in">NSURL</span> * _Nullable filePath, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"完成下载,然后删除文件"</span>);</div><div class="line">        <span class="built_in">NSString</span> *filesTR = filePath.path;</div><div class="line">        <span class="keyword">if</span> (_second&lt;<span class="number">9</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> finishDownLoad];<span class="comment">//网速太快，10秒内下载完毕</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:filesTR]) &#123;</div><div class="line">            <span class="built_in">NSError</span> *error;</div><div class="line">            [[<span class="built_in">NSFileManager</span> defaultManager] removeItemAtURL:filePath error:&amp;error];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    [<span class="keyword">self</span>.downloadTask resume];</div><div class="line">    _timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(countTime) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    [_timer fire];</div><div class="line">    _second = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要注意的一个问题  就是在文件下载完成后，测试结束，需要把文件删除掉</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)countTime&#123;</div><div class="line">    ++ _second;</div><div class="line">    <span class="keyword">if</span> (_second == <span class="number">9</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> finishCurrentTest];</div><div class="line">        <span class="built_in">CGFloat</span> averageSpeed = <span class="keyword">self</span>.completeFile/(pow(<span class="number">1024</span>, <span class="number">2</span>)*<span class="number">10.0</span>);</div><div class="line">        <span class="keyword">self</span>.completeBlock([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2fM"</span>,averageSpeed]);</div><div class="line">        <span class="keyword">self</span>.completeBlock = <span class="literal">nil</span>;</div><div class="line">        [<span class="keyword">self</span>.downloadTask cancel];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSInteger</span> everySecondFile = <span class="keyword">self</span>.completeFile - <span class="keyword">self</span>.lastSecondCompleteFile;</div><div class="line">    <span class="built_in">CGFloat</span> sppeed = everySecondFile/pow(<span class="number">1024</span>, <span class="number">2</span>)*<span class="number">1.0</span>;</div><div class="line">    <span class="keyword">self</span>.callBackBlock([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2fM"</span>,sppeed]);</div><div class="line">    <span class="keyword">self</span>.lastSecondCompleteFile = <span class="keyword">self</span>.completeFile;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为下载的文件都是以字节为单位，所以我转换成了M</p>
<p>pow(1024, 2) = 1024*1024</p>
<p>self.lastSecondCompleteFile = self.completeFile;</p>
<p>这句代码 是将每次计算完成之后，将lastSecondCompleteFile更新为此次下载的大小，等到下一秒，再来进行计算</p>
<p>非常重要的一点是，我们这里使用了timer，一定不要忘记，将timer invalidate</p>
<p>在下载完成，计算平均速度</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)finishDownLoad&#123;</div><div class="line">    [<span class="keyword">self</span> finishCurrentTest];</div><div class="line">    ++ _second;</div><div class="line">    <span class="built_in">CGFloat</span> averageSpeed = <span class="keyword">self</span>.completeFile/(pow(<span class="number">1024</span>, <span class="number">2</span>)*(_second+<span class="number">1</span>)*<span class="number">1.0</span>);</div><div class="line">    <span class="keyword">self</span>.completeBlock([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2fM"</span>,averageSpeed]);</div><div class="line">    <span class="keyword">self</span>.completeBlock = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">self</span>.callBackBlock = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.downloadTask cancel];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)finishCurrentTest&#123;</div><div class="line">    [_timer invalidate];</div><div class="line">    _timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)dealloc&#123;</div><div class="line">    [_timer invalidate];</div><div class="line">    _timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单看一下效果</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-21-6.gif" alt=""></p>
<p>源代码</p>
<p><a href="https://github.com/yangqian111/NetSpeedTest" target="_blank" rel="external">https://github.com/yangqian111/NetSpeedTest</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<p>上边是公众号，下边是我个人微信</p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br>    <image src="http://o8bxt3lx0.bkt.clouddn.com/avatar.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天分享一个下载速度测试的方法，很多APP都有测试网络延迟，测试下载上传速度。之前测试网络延迟的ping我们已经说过了，今天再来讲讲下载速度测试的办法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/"/>
    
      <category term="网络小工具" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/%E7%BD%91%E7%BB%9C%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="下载速度测试" scheme="http://ppsheep.com/all-tags/%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>AVPlayer的使用实践</title>
    <link href="http://ppsheep.com/2017/02/17/AVPlayer%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://ppsheep.com/2017/02/17/AVPlayer的使用实践/</id>
    <published>2017-02-17T09:17:58.000Z</published>
    <updated>2017-02-17T10:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天在网上看到一篇博客，介绍AVPlayer的使用，但是只简单介绍了一下单个的本地文件如何播放，心血来潮，就想着做一个类似于播放器的东西，能够实现播放网络歌曲，循环播放多首音乐，下面我们来实现一下</p>
<a id="more"></a>
<p>首先明确一下，在本文中需要讲到的几点：</p>
<ul>
<li>实现网络歌曲的播放</li>
<li>实现在后台也能播放歌曲</li>
<li>实现多首歌曲的循环播放</li>
<li>需要有播放/暂停和下一首的功能</li>
<li>需要在播放期间能够得知该首歌曲的总时长和当前播放时长</li>
</ul>
<p>本文中就暂时将这名多，后面还会丰富，例如实现缓存下载，实现歌曲缓存的进度查看，实现能够使用耳机按钮控制播放等等。</p>
<h3 id="播放网络歌曲"><a href="#播放网络歌曲" class="headerlink" title="播放网络歌曲"></a>播放网络歌曲</h3><p>因为需要播放网络歌曲，我就往七牛云上传了几首歌，就不用再自己到处去找歌曲了</p>
<p>首先，明确我们播放歌曲使用的是AVPlayer，至于为什么使用它不使用其他的，因为它好用啊，苹果封装了强大的功能，让我们使用，干嘛不用！其实还有其他原因，这个就等着你自己去搜索了。</p>
<h5 id="AVQueuePlayer"><a href="#AVQueuePlayer" class="headerlink" title="AVQueuePlayer"></a>AVQueuePlayer</h5><p>AVQueuePlayer是AVPlayer的一个子类，他可以实现多首歌曲播放，所以我们直接使用它了</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传入多个AVPlayerItem来初始化AVQueuePlayer</span></div><div class="line">+ (<span class="keyword">instancetype</span>)queuePlayerWithItems:(<span class="built_in">NSArray</span>&lt;<span class="built_in">AVPlayerItem</span> *&gt; *)items;</div></pre></td></tr></table></figure>
<h5 id="AVPlayerItem"><a href="#AVPlayerItem" class="headerlink" title="AVPlayerItem"></a>AVPlayerItem</h5><p>AVPlayerItem是一个资源对象，我们加载歌曲的时候都是使用它，它提供了两种初始化方法</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化网络资源</span></div><div class="line">+ (<span class="keyword">instancetype</span>)playerItemWithURL:(<span class="built_in">NSURL</span> *)URL;</div><div class="line"></div><div class="line"><span class="comment">//初始化本地资源，本地的音乐或者影片资源都是通过AVAsset拿出来</span></div><div class="line">+ (<span class="keyword">instancetype</span>)playerItemWithAsset:(<span class="built_in">AVAsset</span> *)asset;</div></pre></td></tr></table></figure>
<p>先来试一下：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化AVPlayerItem</span></div><div class="line"><span class="built_in">NSMutableArray</span> *items = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"><span class="built_in">NSArray</span> *urls = @[MUSIC_URL1,MUSIC_URL2,MUSIC_URL3,MUSIC_URL4,MUSIC_URL5];</div><div class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *url <span class="keyword">in</span> urls) &#123;</div><div class="line">        <span class="built_in">AVPlayerItem</span> *item = [[<span class="built_in">AVPlayerItem</span> alloc] initWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</div><div class="line">        [items addObject:item];</div><div class="line">    &#125;</div><div class="line"><span class="comment">//初始化AVQueuePlayer</span></div><div class="line"><span class="built_in">AVQueuePlayer</span> *player = [<span class="built_in">AVQueuePlayer</span> queuePlayerWithItems: items];</div><div class="line"><span class="comment">//测试播放</span></div><div class="line"><span class="keyword">if</span>(player.status == <span class="built_in">AVPlayerStatusReadyToPlay</span>)&#123;</div><div class="line">	[player play];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码看起来没有错，但是我在做的时候，却遇到一个问题，第一次点击的时候，并不会播放，第二次第三次就会开始播放了。</p>
<p>其实这里是有一个缓冲的原因，因为是网络资源，涉及到一个缓冲，后面我们会对这个做处理，歌曲确实是能够播放的</p>
<p>就这样，简单实现了多首歌曲的播放，但是我们还需要实现循环播放，这个就相对麻烦一点了。</p>
<p>要实现循环播放，我们就需要知道AVQueuePlayer的播放机制，对于AVQueuePlayer播放，是有一个队列，每次播放完成一首歌曲过后，这首歌曲就会从队列中删除，即这个item会从队列中删除，并且如果我们想直接再将这个item再次加入队列，是不能够加入的，我们必须要在new 一个item,再次加载到这个队列当中，才能够实现再次播放。这个也是挺蛋疼的。</p>
<p>知道了这个，我们就有想法了，我们能够在player最后一首歌曲即将播放完成后，再来新建一个队列啊。思路是正确的，但是我们不能够直接得到player正在播放最后一首歌曲，这时候我想到的是一个timer检测，通过timer去检测player的播放队列是否还剩下一首歌曲，如果是的话，我们就新建队列，加入到player的播放序列中</p>
<p>首先，我们在开始播放歌曲的时候，就需要将timer启动，监测player</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.checkMusicTimer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">3</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(checkMusic) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>
<p>在checkMusic我们判断当前是否队列中只有一首歌曲</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)checkMusic</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.player.items.count == <span class="number">1</span>)&#123;</div><div class="line">        [<span class="keyword">self</span> prepareItems];<span class="comment">//这个方法即是再次创建队列，加入到player播放序列中</span></div><div class="line">        [<span class="keyword">self</span> play];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 准备歌曲</span></div><div class="line"><span class="comment">// 因为需要歌曲循环播放，每次AVQueuePlayer播放完成一首歌曲，就会将其从队列中移除</span></div><div class="line"><span class="comment">// 所以我们需要在歌曲最后一首播放完之前重新为AVQueuePlayer创建一个播放队列，这样就能够实现循环播放</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//</span></div><div class="line">- (<span class="keyword">void</span>)prepareItems&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *items = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="built_in">NSArray</span> *urls = @[MUSIC_URL1,MUSIC_URL2,MUSIC_URL3,MUSIC_URL4,MUSIC_URL5];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *url <span class="keyword">in</span> urls) &#123;</div><div class="line">        <span class="built_in">AVPlayerItem</span> *item = [[<span class="built_in">AVPlayerItem</span> alloc] initWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</div><div class="line">        [items addObject:item];</div><div class="line"><span class="comment">//这里是添加每首歌曲的监测，我们后面会讲到</span></div><div class="line">        [item addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"loadedTimeRanges"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(playbackFinished:) name:<span class="built_in">AVPlayerItemDidPlayToEndTimeNotification</span> object:item];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.playerItems = items;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">AVPlayerItem</span> *item <span class="keyword">in</span> items) &#123;</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span>.player canInsertItem:item afterItem:<span class="keyword">self</span>.player.items.lastObject]) &#123;</div><div class="line">            [<span class="keyword">self</span>.player insertItem:item afterItem:<span class="keyword">self</span>.player.items.lastObject];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，我们就能够实现循环播放了，这里的代码和后面要讲到的有关联，所以这里看不清晰也没关系，接着往后看</p>
<p>上面我们讲了，有个缓冲的原因，导致首次点击播放的时候，不能够成功播放，在AVPlayerItem中有一个属性loadedTimeRanges，表示的是缓存状态，我们可以对他进行观察，来进行播放</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//上面的代码已经写出了对缓冲的检测</span></div><div class="line">[item addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"loadedTimeRanges"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>然后我们在观察者中</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"loadedTimeRanges"</span>]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"缓冲"</span>);</div><div class="line">        [<span class="keyword">self</span> play];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在每个item中加入了观察者，在什么时候移除呢，当然是在每首歌曲播放完成后移除，如果不移除将会崩溃</p>
<p>再次对每个item进行观测，播放结束时</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(playbackFinished:) name:<span class="built_in">AVPlayerItemDidPlayToEndTimeNotification</span> object:item];</div></pre></td></tr></table></figure>
<p>在播放结束，移除观察者</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)playbackFinished:(<span class="built_in">NSNotification</span> *)notice &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"播放完成"</span>);</div><div class="line">    [<span class="keyword">self</span>.currentItem removeObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"loadedTimeRanges"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现后台播放"><a href="#实现后台播放" class="headerlink" title="实现后台播放"></a>实现后台播放</h3><p>要实现后台播放，很简单只需要加入几行代码</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置可后台播放</span></div><div class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error];</div><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>然后我们还需要在项目里设置</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-02-17-100118.jpg" alt=""></p>
<h3 id="播放暂停"><a href="#播放暂停" class="headerlink" title="播放暂停"></a>播放暂停</h3><p>这个就很简单了</p>
<p>直接调方法就行</p>
<p>上一首下一首也是直接调用方法就行</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*!</span></div><div class="line"> @method		play</div><div class="line"> @abstract		Signals the desire to begin playback at the current item's natural rate.</div><div class="line"> @discussion	Equivalent to setting the value of rate to 1.0.</div><div class="line"> */</div><div class="line"> </div><div class="line">- (<span class="keyword">void</span>)play;</div><div class="line">- <span class="comment">/*!</span></div><div class="line"> @method		pause</div><div class="line"> @abstract		Pauses playback.</div><div class="line"> @discussion	Equivalent to setting the value of rate to 0.0.</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)pause;</div><div class="line"></div><div class="line"><span class="comment">/*!</span></div><div class="line">    @method     advanceToNextItem</div><div class="line">    @abstract   Ends playback of the current item and initiates playback of the next item in the player's queue.</div><div class="line">    @discussion Removes the current item from the play queue.</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)advanceToNextItem;</div></pre></td></tr></table></figure>
<h3 id="时长计算"><a href="#时长计算" class="headerlink" title="时长计算"></a>时长计算</h3><p>为player加一个观察者就行</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)playerDidPlay&#123;</div><div class="line">    <span class="comment">//    //添加播放进度观察者</span></div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">        <span class="keyword">self</span>.timeObserver = [<span class="keyword">self</span>.manager.player addPeriodicTimeObserverForInterval:<span class="built_in">CMTimeMake</span>(<span class="number">1.0</span>,<span class="number">1.0</span>) queue:dispatch_get_main_queue() usingBlock:^(<span class="built_in">CMTime</span> time) &#123;</div><div class="line">            <span class="keyword">float</span> current = <span class="built_in">CMTimeGetSeconds</span>(time);</div><div class="line">            <span class="keyword">float</span> total = <span class="built_in">CMTimeGetSeconds</span>(weakSelf.manager.currentItem.duration);</div><div class="line">            weakSelf.total = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2f"</span>,total];</div><div class="line">            weakSelf.current = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.f"</span>,current];</div><div class="line">            weakSelf.label.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@"</span>,weakSelf.current,weakSelf.total];</div><div class="line">        &#125;];</div><div class="line">    _isPlaying = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span>.play setTitle:<span class="string">@"暂停"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的CMTime指的是帧数</p>
<p>基本上就是这些了，我把源码先放上去，后面再来丰富</p>
<p>源码地址</p>
<p><a href="https://github.com/yangqian111/AVPlayer" target="_blank" rel="external">https://github.com/yangqian111/AVPlayer</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天在网上看到一篇博客，介绍AVPlayer的使用，但是只简单介绍了一下单个的本地文件如何播放，心血来潮，就想着做一个类似于播放器的东西，能够实现播放网络歌曲，循环播放多首音乐，下面我们来实现一下&lt;/p&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://ppsheep.com/all-categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="AVPlayer" scheme="http://ppsheep.com/all-tags/AVPlayer/"/>
    
  </entry>
  
  <entry>
    <title>iOS ping网络小工具</title>
    <link href="http://ppsheep.com/2017/01/03/ios-ping/"/>
    <id>http://ppsheep.com/2017/01/03/ios-ping/</id>
    <published>2017-01-03T05:30:44.000Z</published>
    <updated>2017-05-15T07:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ping工具经常在游戏中见到，计算网络的延迟，Apple官方有一个SimplePing的demo，用于对网络进行检测，就跟我们电脑端的ping效果相同，在一些情况下，我们可以用来进行网络速度的检测，这里将官方给出的demo进行封装，并且在SimplePing的基础上进行了一些改动，将我们需要用到的一些其他的数据取出来，便于我们的使用，源码我会放在文章末尾。</p>
<a id="more"></a>
<p><strong>此文章已更新，最新版本的ping 请看原工程 <a href="https://github.com/yangqian111/PPSPing" target="_blank" rel="external">https://github.com/yangqian111/PPSPing</a> 文章中的方法存在以下问题：</strong></p>
<p><strong>1. 不能够在子线程发起ping</strong></p>
<p><strong>2. 不能够并发Ping</strong></p>
<h3 id="SimplePing"><a href="#SimplePing" class="headerlink" title="SimplePing"></a>SimplePing</h3><p>Apple官方的demo SimplePing ，能够实现网络ping功能，但是有一些其他的数据不能够得到，例如存活时间，响应时间等等，下面是官方例子：</p>
<p><a href="https://developer.apple.com/library/content/samplecode/SimplePing/Introduction/Intro.html" target="_blank" rel="external">https://developer.apple.com/library/content/samplecode/SimplePing/Introduction/Intro.html</a></p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-01-03-053734.jpg" alt=""></p>
<h3 id="改动后的PPSSimplePing"><a href="#改动后的PPSSimplePing" class="headerlink" title="改动后的PPSSimplePing"></a>改动后的PPSSimplePing</h3><p>改动后的SimplePing能够计算出响应时间，得到域名的ip地址，存活时间等等。</p>
<h3 id="PPSPingItem"><a href="#PPSPingItem" class="headerlink" title="PPSPingItem"></a>PPSPingItem</h3><p>新建一个我们的自己的工程，将刚才下载的例子中的SimplePing 头文件和实现文件 两个文件拷贝到我们的工程中</p>
<p>首先，我们新建一个model PPSPingItem  用来封装我们在网络ping过程中，返回的一些数据，便于数据展示</p>
<p>我们来看一张电脑的终端ping的样式：</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-01-03-054734.jpg" alt=""></p>
<p>我们在手机端要实现的也是这种效果</p>
<p>PPSPingItem：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">typedef NS_ENUM(NSUInteger, PPSPingStatus)&#123;</div><div class="line">    PPSPingStatusDidStart,//开始</div><div class="line">    PPSPingStatusDidFailToSendPacket,//发送数据包失败</div><div class="line">    PPSPingStatusDidReceivePacket,//收到数据包</div><div class="line">    PPSPingStatusDidReceiveUnexpectedPacket,//数据包数据错误</div><div class="line">    PPSPingStatusDidTimeout,//超时</div><div class="line">    PPSPingStatusError,//错误</div><div class="line">    PPSPingStatusFinished,//完成</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">@interface PPSPingItem : NSObject</div><div class="line"></div><div class="line">/**</div><div class="line"> </div><div class="line"> ping www.163.com</div><div class="line"> </div><div class="line"> PING 163.xdwscache.ourglb0.com (183.134.24.71): 56 data bytes</div><div class="line"> </div><div class="line"> 64 bytes from 183.134.24.71: icmp_seq=0 ttl=53 time=12.914 ms</div><div class="line"> 64 bytes from 183.134.24.71: icmp_seq=1 ttl=53 time=15.136 ms</div><div class="line"> </div><div class="line"> --- 163.xdwscache.ourglb0.com ping statistics ---</div><div class="line"> 2 packets transmitted, 2 packets received, 0.0% packet loss</div><div class="line"> </div><div class="line"> */</div><div class="line"></div><div class="line">/**</div><div class="line"> 对应上面的一个ping解释属性</div><div class="line"> */</div><div class="line"></div><div class="line">@property(nonatomic) NSString *originalAddress; // 163.xdwscache.ourglb0.com</div><div class="line"></div><div class="line">@property(nonatomic, copy) NSString *IPAddress;// 183.134.24.71</div><div class="line"></div><div class="line">@property(nonatomic) NSUInteger dateBytesLength;// 64</div><div class="line"></div><div class="line">@property(nonatomic) double     timeMilliseconds;//time</div><div class="line"></div><div class="line">@property(nonatomic) NSInteger  timeToLive;//ttl</div><div class="line"></div><div class="line">@property(nonatomic) NSInteger  ICMPSequence;//icmp_seq</div><div class="line"></div><div class="line">@property(nonatomic) PPSPingStatus status;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>PPSPingItem中的属性，在我们ping网络过程中，返回数据时需要用到。</p>
<h3 id="PPSPingServices"><a href="#PPSPingServices" class="headerlink" title="PPSPingServices"></a>PPSPingServices</h3><p>PPSPingServices是一个服务类，用作ping的入口，一个管理类，供外部调用，在PPSPingServices类中，我将发起网络ping的接口做成了block，当然，如果你更喜欢delegate，也可以使用delegate实现</p>
<p>首先，一个类方法，调起Ping服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> 开始收集Ping网络消息</div><div class="line"> </div><div class="line"> @param address 域名</div><div class="line"> @param handler 回调包信息 每次收到的网络信息</div><div class="line"> @return PPSPingServices</div><div class="line"> */</div><div class="line">+ (PPSPingServices *)startPingAddress:(NSString *)address</div><div class="line">                      callbackHandler:(void(^)(PPSPingItem *pingItem, NSArray *pingItems))handler;</div></pre></td></tr></table></figure>
<p>在实现文件中，我们需要实现SimplePingDelegate，delegate中一共有6个方法，分别对应这ping的不同状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//开始进行网络检测</div><div class="line">- (void)simplePing:(SimplePing *)pinger didStartWithAddress:(NSData *)address;</div><div class="line">//网络检测失败</div><div class="line">- (void)simplePing:(SimplePing *)pinger didFailWithError:(NSError *)error;</div><div class="line">//发送网络包成功</div><div class="line">- (void)simplePing:(SimplePing *)pinger didSendPacket:(NSData *)packet sequenceNumber:(uint16_t)sequenceNumber;</div><div class="line">//发送网络包失败</div><div class="line">- (void)simplePing:(SimplePing *)pinger didFailToSendPacket:(NSData *)packet sequenceNumber:(uint16_t)sequenceNumber error:(NSError *)error;</div><div class="line">//收到网络包回应</div><div class="line">- (void)simplePing:(SimplePing *)pinger didReceivePingResponsePacket:(NSData *)packet sequenceNumber:(uint16_t)sequenceNumber;</div><div class="line">//收到错误的网络包</div><div class="line">- (void)simplePing:(SimplePing *)pinger didReceiveUnexpectedPacket:(NSData *)packet;</div></pre></td></tr></table></figure>
<p>开始ping网络数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> 开始网络ping网络</div><div class="line"></div><div class="line"> @param sender 按钮</div><div class="line"> */</div><div class="line">- (IBAction)startPing:(id)sender &#123;</div><div class="line"> self.pingService = [PPSPingServices startPingAddress:_domainTextFiled.text callbackHandler:^(PPSPingItem *pingItem, NSArray *pingItems) &#123;</div><div class="line">     NSLog(@&quot;%@&quot;,pingItem);</div><div class="line"> &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在服务类中，我们开始ping网络，会在6个delegate方法中，分别获得ping网络的返回值</p>
<p>看一下效果图：</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2017-01-09-iOSping%E5%B0%8F%E5%B7%A5%E5%85%B7.gif" alt=""></p>
<p>后面如果还有时间，会接着完善</p>
<p>源码放在：</p>
<p><a href="https://github.com/yangqian111/PPSPing" target="_blank" rel="external">https://github.com/yangqian111/PPSPing</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ping工具经常在游戏中见到，计算网络的延迟，Apple官方有一个SimplePing的demo，用于对网络进行检测，就跟我们电脑端的ping效果相同，在一些情况下，我们可以用来进行网络速度的检测，这里将官方给出的demo进行封装，并且在SimplePing的基础上进行了一些改动，将我们需要用到的一些其他的数据取出来，便于我们的使用，源码我会放在文章末尾。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/"/>
    
      <category term="网络小工具" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/%E7%BD%91%E7%BB%9C%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="ping工具" scheme="http://ppsheep.com/all-tags/ping%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>iOS 获取当前设备的信息-网络相关</title>
    <link href="http://ppsheep.com/2016/12/16/iOS%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BF%A1%E6%81%AF-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    <id>http://ppsheep.com/2016/12/16/iOS获取当前设备的信息-网络相关/</id>
    <published>2016-12-16T06:57:18.000Z</published>
    <updated>2017-02-15T04:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搞网络相关的SDK，将自己在项目中能够开放出来的，记录下来，其中很多用到了C，相当于一个工具。后期还会选择开放一些ping网络的工具，找链路节点的工具，最近就在搞这个。</p>
<a id="more"></a>
<h3 id="获取当前设备的IP地址"><a href="#获取当前设备的IP地址" class="headerlink" title="获取当前设备的IP地址"></a>获取当前设备的IP地址</h3><p>对于公网的IP当然，在我们本地设备上是不能够获取到的，至少我没有找到方法获取到出口IP地址，但是局域网的IP还是能够获取到的，这里ipv4和ipv6 都能够获取出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">+ (NSString *)deviceIPAdress</div><div class="line">&#123;</div><div class="line">    NSString *address = @&quot;&quot;;</div><div class="line">    struct ifaddrs *interfaces = NULL;</div><div class="line">    struct ifaddrs *temp_addr = NULL;</div><div class="line">    int success = 0;</div><div class="line">    </div><div class="line">    success = getifaddrs(&amp;interfaces);</div><div class="line">    </div><div class="line">    if (success == 0) &#123;  // 0 表示获取成功</div><div class="line">        </div><div class="line">        temp_addr = interfaces;</div><div class="line">        while (temp_addr != NULL) &#123;</div><div class="line">            </div><div class="line">            if ([[NSString stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:@&quot;en0&quot;] || [[NSString stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:@&quot;pdp_ip0&quot;])</div><div class="line">                &#123;</div><div class="line">                //如果是IPV4地址，直接转化</div><div class="line">                if (temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET)&#123;</div><div class="line">                    </div><div class="line">                    // Get NSString from C String</div><div class="line">                    address = [self formatIPV4Address:((struct sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr];</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                //如果是IPV6地址</div><div class="line">                else if (temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET6)&#123;</div><div class="line">                    address = [self formatIPV6Address:((struct sockaddr_in6 *)temp_addr-&gt;ifa_addr)-&gt;sin6_addr];</div><div class="line">                    if (address &amp;&amp; ![address isEqualToString:@&quot;&quot;] &amp;&amp; ![address.uppercaseString hasPrefix:@&quot;FE80&quot;]) break;</div><div class="line">                &#125;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            temp_addr = temp_addr-&gt;ifa_next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    freeifaddrs(interfaces);</div><div class="line">    </div><div class="line">    //以FE80开始的地址是单播地址</div><div class="line">    if (address &amp;&amp; ![address isEqualToString:@&quot;&quot;] &amp;&amp; ![address.uppercaseString hasPrefix:@&quot;FE80&quot;]) &#123;</div><div class="line">        return address;</div><div class="line">    &#125; else &#123;</div><div class="line">        return @&quot;127.0.0.1&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取当前设备网关地址"><a href="#获取当前设备网关地址" class="headerlink" title="获取当前设备网关地址"></a>获取当前设备网关地址</h3><p>网关地址，通俗点  就是路由器的地址，也是相对于局域网 这里需要区分一下ipv4和ipv6，两种获取网关地址的方法是不一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">//ipv4网关地址</div><div class="line">+ (NSString *)getGatewayIPV4Address</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    NSString *address = nil;</div><div class="line">    </div><div class="line">    /* net.route.0.inet.flags.gateway */</div><div class="line">    int mib[] = &#123;CTL_NET, PF_ROUTE, 0, AF_INET, NET_RT_FLAGS, RTF_GATEWAY&#125;;</div><div class="line">    </div><div class="line">    size_t l;</div><div class="line">    char *buf, *p;</div><div class="line">    struct rt_msghdr *rt;</div><div class="line">    struct sockaddr *sa;</div><div class="line">    struct sockaddr *sa_tab[RTAX_MAX];</div><div class="line">    int i;</div><div class="line">    </div><div class="line">    if (sysctl(mib, sizeof(mib) / sizeof(int), 0, &amp;l, 0, 0) &lt; 0) &#123;</div><div class="line">        address = @&quot;192.168.0.1&quot;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (l &gt; 0) &#123;</div><div class="line">        buf = malloc(l);</div><div class="line">        if (sysctl(mib, sizeof(mib) / sizeof(int), buf, &amp;l, 0, 0) &lt; 0) &#123;</div><div class="line">            address = @&quot;192.168.0.1&quot;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (p = buf; p &lt; buf + l; p += rt-&gt;rtm_msglen) &#123;</div><div class="line">            rt = (struct rt_msghdr *)p;</div><div class="line">            sa = (struct sockaddr *)(rt + 1);</div><div class="line">            for (i = 0; i &lt; RTAX_MAX; i++) &#123;</div><div class="line">                if (rt-&gt;rtm_addrs &amp; (1 &lt;&lt; i)) &#123;</div><div class="line">                    sa_tab[i] = sa;</div><div class="line">                    sa = (struct sockaddr *)((char *)sa + ROUNDUP(sa-&gt;sa_len));</div><div class="line">                &#125; else &#123;</div><div class="line">                    sa_tab[i] = NULL;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            if (((rt-&gt;rtm_addrs &amp; (RTA_DST | RTA_GATEWAY)) == (RTA_DST | RTA_GATEWAY)) &amp;&amp;</div><div class="line">                sa_tab[RTAX_DST]-&gt;sa_family == AF_INET &amp;&amp;</div><div class="line">                sa_tab[RTAX_GATEWAY]-&gt;sa_family == AF_INET) &#123;</div><div class="line">                unsigned char octet[4] = &#123;0, 0, 0, 0&#125;;</div><div class="line">                int i;</div><div class="line">                for (i = 0; i &lt; 4; i++) &#123;</div><div class="line">                    octet[i] = (((struct sockaddr_in *)(sa_tab[RTAX_GATEWAY]))-&gt;sin_addr.s_addr &gt;&gt;</div><div class="line">                                (i * 8)) &amp;</div><div class="line">                    0xFF;</div><div class="line">                &#125;</div><div class="line">                if (((struct sockaddr_in *)sa_tab[RTAX_DST])-&gt;sin_addr.s_addr == 0) &#123;</div><div class="line">                    in_addr_t addr =</div><div class="line">                    ((struct sockaddr_in *)(sa_tab[RTAX_GATEWAY]))-&gt;sin_addr.s_addr;</div><div class="line">                    address = [self formatIPV4Address:*((struct in_addr *)&amp;addr)];</div><div class="line">                    //                    NSLog(@&quot;IPV4address%@&quot;, address);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        free(buf);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">//ipv6网关地址</div><div class="line">+ (NSString *)getGatewayIPV6Address</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    NSString *address = nil;</div><div class="line">    </div><div class="line">    /* net.route.0.inet.flags.gateway */</div><div class="line">    int mib[] = &#123;CTL_NET, PF_ROUTE, 0, AF_INET6, NET_RT_FLAGS, RTF_GATEWAY&#125;;</div><div class="line">    </div><div class="line">    size_t l;</div><div class="line">    char *buf, *p;</div><div class="line">    struct rt_msghdr *rt;</div><div class="line">    struct sockaddr_in6 *sa;</div><div class="line">    struct sockaddr_in6 *sa_tab[RTAX_MAX];</div><div class="line">    int i;</div><div class="line">    </div><div class="line">    if (sysctl(mib, sizeof(mib) / sizeof(int), 0, &amp;l, 0, 0) &lt; 0) &#123;</div><div class="line">        address = @&quot;192.168.0.1&quot;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (l &gt; 0) &#123;</div><div class="line">        buf = malloc(l);</div><div class="line">        if (sysctl(mib, sizeof(mib) / sizeof(int), buf, &amp;l, 0, 0) &lt; 0) &#123;</div><div class="line">            address = @&quot;192.168.0.1&quot;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (p = buf; p &lt; buf + l; p += rt-&gt;rtm_msglen) &#123;</div><div class="line">            rt = (struct rt_msghdr *)p;</div><div class="line">            sa = (struct sockaddr_in6 *)(rt + 1);</div><div class="line">            for (i = 0; i &lt; RTAX_MAX; i++) &#123;</div><div class="line">                if (rt-&gt;rtm_addrs &amp; (1 &lt;&lt; i)) &#123;</div><div class="line">                    sa_tab[i] = sa;</div><div class="line">                    sa = (struct sockaddr_in6 *)((char *)sa + sa-&gt;sin6_len);</div><div class="line">                &#125; else &#123;</div><div class="line">                    sa_tab[i] = NULL;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            if( ((rt-&gt;rtm_addrs &amp; (RTA_DST|RTA_GATEWAY)) == (RTA_DST|RTA_GATEWAY))</div><div class="line">               &amp;&amp; sa_tab[RTAX_DST]-&gt;sin6_family == AF_INET6</div><div class="line">               &amp;&amp; sa_tab[RTAX_GATEWAY]-&gt;sin6_family == AF_INET6)</div><div class="line">                &#123;</div><div class="line">                address = [self formatIPV6Address:((struct sockaddr_in6 *)(sa_tab[RTAX_GATEWAY]))-&gt;sin6_addr];</div><div class="line">                //                NSLog(@&quot;IPV6address%@&quot;, address);</div><div class="line">                break;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        free(buf);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在获取的时候判断一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line"> * 获取当前设备网关地址</div><div class="line"> */</div><div class="line">+ (NSString *)getGatewayIPAddress&#123;</div><div class="line">    NSString *address = nil;</div><div class="line">    </div><div class="line">    NSString *gatewayIPV4 = [self getGatewayIPV4Address];</div><div class="line">    NSString *gatewayIPV6 = [self getGatewayIPV6Address];</div><div class="line">    </div><div class="line">    if (gatewayIPV6 != nil) &#123;</div><div class="line">        address = gatewayIPV6;</div><div class="line">    &#125; else &#123;</div><div class="line">        address = gatewayIPV4;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过域名拿到域名对应的IP地址-CDN"><a href="#通过域名拿到域名对应的IP地址-CDN" class="headerlink" title="通过域名拿到域名对应的IP地址(CDN)"></a>通过域名拿到域名对应的IP地址(CDN)</h3><p>通过域名拿到的IP地址，一般来说，如果买了CDN的话，拿到的Ip都会是多个IP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*!</div><div class="line"> * 通过hostname获取ip列表 DNS解析地址</div><div class="line"> */</div><div class="line">+ (NSArray *)getDNSsWithDormain:(NSString *)hostName&#123;</div><div class="line">    NSMutableArray *result = [[NSMutableArray alloc] init];</div><div class="line">    NSArray *IPDNSs = [self getDNSWithHostName:hostName];</div><div class="line">    if (IPDNSs &amp;&amp; IPDNSs.count &gt; 0) &#123;</div><div class="line">        [result addObjectsFromArray:IPDNSs];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [NSArray arrayWithArray:result];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">+ (NSArray *)getDNSWithHostName:(NSString *)hostName</div><div class="line">&#123;</div><div class="line">    const char *hostN = [hostName UTF8String];</div><div class="line">    Boolean result = false;</div><div class="line">    Boolean bResolved = false;</div><div class="line">    CFHostRef hostRef;</div><div class="line">    CFArrayRef addresses = NULL;</div><div class="line">    </div><div class="line">    CFStringRef hostNameRef = CFStringCreateWithCString(kCFAllocatorDefault, hostN, kCFStringEncodingASCII);</div><div class="line">    </div><div class="line">    hostRef = CFHostCreateWithName(kCFAllocatorDefault, hostNameRef);</div><div class="line">    if (hostRef) &#123;</div><div class="line">        result = CFHostStartInfoResolution(hostRef, kCFHostAddresses, NULL);</div><div class="line">        if (result == true) &#123;</div><div class="line">            addresses = CFHostGetAddressing(hostRef, &amp;result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    bResolved = result;</div><div class="line">    NSMutableArray *ipAddresses = [NSMutableArray array];</div><div class="line">    if(bResolved)</div><div class="line">        &#123;</div><div class="line">        struct sockaddr_in* remoteAddr;</div><div class="line">        </div><div class="line">        for(int i = 0; i &lt; CFArrayGetCount(addresses); i++)</div><div class="line">            &#123;</div><div class="line">            CFDataRef saData = (CFDataRef)CFArrayGetValueAtIndex(addresses, i);</div><div class="line">            remoteAddr = (struct sockaddr_in*)CFDataGetBytePtr(saData);</div><div class="line">            </div><div class="line">            if(remoteAddr != NULL)</div><div class="line">                &#123;</div><div class="line">                //获取IP地址</div><div class="line">                const char *strIP41 = inet_ntoa(remoteAddr-&gt;sin_addr);</div><div class="line">                NSString *strDNS =[NSString stringWithCString:strIP41 encoding:NSASCIIStringEncoding];</div><div class="line">                [ipAddresses addObject:strDNS];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    CFRelease(hostNameRef);</div><div class="line">    if (hostRef) &#123;</div><div class="line">        CFRelease(hostRef);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [NSArray arrayWithArray:ipAddresses];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取当前的网络状况"><a href="#获取当前的网络状况" class="headerlink" title="获取当前的网络状况"></a>获取当前的网络状况</h3><p>如果是WIFI环境，直接返回wifi  如果是蜂窝网络环境，那么还可以区分到底是那个运营商，还可以区分是使用的什么网络，4G 3G 2G等  运营商暂时区分了国内的三大运营商，如果还需要区分国外的，可以维基百科上查对应的code</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+(NSString *)currentNetInfo&#123;</div><div class="line">    </div><div class="line">    NSString *returnName = nil;</div><div class="line">    </div><div class="line">    PPSNetWorkType type = [PPSGetAppEnvironment getNetworkTypeFromStatusBar];</div><div class="line">    if (type == PPSNetWorkTypeWiFi) &#123;</div><div class="line">        returnName = @&quot;WIFI&quot;;</div><div class="line">        return returnName;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSString *carrierName = nil;</div><div class="line">    CTTelephonyNetworkInfo *netInfo = [[CTTelephonyNetworkInfo alloc] init];</div><div class="line">    CTCarrier *carrier = [netInfo subscriberCellularProvider];</div><div class="line">    if (carrier != NULL) &#123;</div><div class="line">        NSArray *chinaMobileMics = @[@&quot;0&quot;,@&quot;2&quot;,@&quot;7&quot;];//移动code</div><div class="line">        NSArray *chinaTelecomMics = @[@&quot;3&quot;,@&quot;5&quot;,@&quot;11&quot;];//电信code</div><div class="line">        NSArray *chinaUnicomMics = @[@&quot;1&quot;,@&quot;6&quot;];//联通code</div><div class="line">        NSString *mobileNetworkCode = [carrier mobileNetworkCode];</div><div class="line">        if ([chinaMobileMics containsObject:mobileNetworkCode]) &#123;</div><div class="line">            carrierName = @&quot;chinamobile&quot;;</div><div class="line">        &#125;else if ([chinaTelecomMics containsObject:mobileNetworkCode])&#123;</div><div class="line">            carrierName = @&quot;chinatelecom&quot;;</div><div class="line">        &#125;else if ([chinaUnicomMics containsObject:mobileNetworkCode])&#123;</div><div class="line">            carrierName = @&quot;chinaunicom&quot;;</div><div class="line">        &#125;else&#123;</div><div class="line">            carrierName = @&quot;unknown&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        carrierName = @&quot;unknown&quot;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    switch (type) &#123;</div><div class="line">        case PPSNetWorkType2G:</div><div class="line">            returnName = [NSString stringWithFormat:@&quot;%@_%@&quot;,carrierName,@&quot;2G&quot;];</div><div class="line">            break;</div><div class="line">        case PPSNetWorkType3G:</div><div class="line">            returnName = [NSString stringWithFormat:@&quot;%@_%@&quot;,carrierName,@&quot;3G&quot;];</div><div class="line">            break;</div><div class="line">        case PPSNetWorkType4G:</div><div class="line">            returnName = [NSString stringWithFormat:@&quot;%@_%@&quot;,carrierName,@&quot;4G&quot;];</div><div class="line">            break;</div><div class="line">        case PPSNetWorkType5G:</div><div class="line">            returnName = [NSString stringWithFormat:@&quot;%@_%@&quot;,carrierName,@&quot;5G&quot;];</div><div class="line">            break;</div><div class="line">        case PPSNetWorkTypeNone:</div><div class="line">            returnName = [NSString stringWithFormat:@&quot;%@_%@&quot;,carrierName,@&quot;unknown&quot;];</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            returnName = [NSString stringWithFormat:@&quot;%@_%@&quot;,carrierName,@&quot;unknown&quot;];</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    return returnName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取当前的设备信息"><a href="#获取当前的设备信息" class="headerlink" title="获取当前的设备信息"></a>获取当前的设备信息</h3><p>获取当前设备的信息，是iPhone 4 5 6 7还是 等等  还有系统的版本号  手机、平板<br>之类的都能够去区分出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> 获取设备的类型</div><div class="line"> </div><div class="line"> @return 设备类型</div><div class="line"> */</div><div class="line">+ (NSString *)deviceInfo &#123;</div><div class="line">    struct utsname systemInfo;</div><div class="line">    </div><div class="line">    uname(&amp;systemInfo);</div><div class="line">    </div><div class="line">    NSString* code = [NSString stringWithCString:systemInfo.machine</div><div class="line">                                        encoding:NSUTF8StringEncoding];</div><div class="line">    </div><div class="line">    static NSDictionary* deviceNamesByCode = nil;</div><div class="line">    </div><div class="line">    if (!deviceNamesByCode) &#123;</div><div class="line">        </div><div class="line">        deviceNamesByCode = @&#123;@&quot;i386&quot;      :@&quot;Simulator&quot;,</div><div class="line">                              @&quot;x86_64&quot;    :@&quot;Simulator&quot;,</div><div class="line">                              @&quot;iPod1,1&quot;   :@&quot;iPod Touch&quot;,        // (Original)</div><div class="line">                              @&quot;iPod2,1&quot;   :@&quot;iPod Touch&quot;,        // (Second Generation)</div><div class="line">                              @&quot;iPod3,1&quot;   :@&quot;iPod Touch&quot;,        // (Third Generation)</div><div class="line">                              @&quot;iPod4,1&quot;   :@&quot;iPod Touch&quot;,        // (Fourth Generation)</div><div class="line">                              @&quot;iPod7,1&quot;   :@&quot;iPod Touch&quot;,        // (6th Generation)</div><div class="line">                              @&quot;iPhone1,1&quot; :@&quot;iPhone&quot;,            // (Original)</div><div class="line">                              @&quot;iPhone1,2&quot; :@&quot;iPhone&quot;,            // (3G)</div><div class="line">                              @&quot;iPhone2,1&quot; :@&quot;iPhone&quot;,            // (3GS)</div><div class="line">                              @&quot;iPad1,1&quot;   :@&quot;iPad&quot;,              // (Original)</div><div class="line">                              @&quot;iPad2,1&quot;   :@&quot;iPad 2&quot;,            //</div><div class="line">                              @&quot;iPad3,1&quot;   :@&quot;iPad&quot;,              // (3rd Generation)</div><div class="line">                              @&quot;iPhone3,1&quot; :@&quot;iPhone 4&quot;,          // (GSM)</div><div class="line">                              @&quot;iPhone3,3&quot; :@&quot;iPhone 4&quot;,          // (CDMA/Verizon/Sprint)</div><div class="line">                              @&quot;iPhone4,1&quot; :@&quot;iPhone 4S&quot;,         //</div><div class="line">                              @&quot;iPhone5,1&quot; :@&quot;iPhone 5&quot;,          // (model A1428, AT&amp;T/Canada)</div><div class="line">                              @&quot;iPhone5,2&quot; :@&quot;iPhone 5&quot;,          // (model A1429, everything else)</div><div class="line">                              @&quot;iPad3,4&quot;   :@&quot;iPad&quot;,              // (4th Generation)</div><div class="line">                              @&quot;iPad2,5&quot;   :@&quot;iPad Mini&quot;,         // (Original)</div><div class="line">                              @&quot;iPhone5,3&quot; :@&quot;iPhone 5c&quot;,         // (model A1456, A1532 | GSM)</div><div class="line">                              @&quot;iPhone5,4&quot; :@&quot;iPhone 5c&quot;,         // (model A1507, A1516, A1526 (China), A1529 | Global)</div><div class="line">                              @&quot;iPhone6,1&quot; :@&quot;iPhone 5s&quot;,         // (model A1433, A1533 | GSM)</div><div class="line">                              @&quot;iPhone6,2&quot; :@&quot;iPhone 5s&quot;,         // (model A1457, A1518, A1528 (China), A1530 | Global)</div><div class="line">                              @&quot;iPhone7,1&quot; :@&quot;iPhone 6 Plus&quot;,     //</div><div class="line">                              @&quot;iPhone7,2&quot; :@&quot;iPhone 6&quot;,          //</div><div class="line">                              @&quot;iPhone8,1&quot; :@&quot;iPhone 6S&quot;,         //</div><div class="line">                              @&quot;iPhone8,2&quot; :@&quot;iPhone 6S Plus&quot;,    //</div><div class="line">                              @&quot;iPhone8,4&quot; :@&quot;iPhone SE&quot;,         //</div><div class="line">                              @&quot;iPhone9,1&quot; :@&quot;iPhone 7&quot;,          //</div><div class="line">                              @&quot;iPhone9,3&quot; :@&quot;iPhone 7&quot;,          //</div><div class="line">                              @&quot;iPhone9,2&quot; :@&quot;iPhone 7 Plus&quot;,     //</div><div class="line">                              @&quot;iPhone9,4&quot; :@&quot;iPhone 7 Plus&quot;,     //</div><div class="line">                              </div><div class="line">                              @&quot;iPad4,1&quot;   :@&quot;iPad Air&quot;,          // 5th Generation iPad (iPad Air) - Wifi</div><div class="line">                              @&quot;iPad4,2&quot;   :@&quot;iPad Air&quot;,          // 5th Generation iPad (iPad Air) - Cellular</div><div class="line">                              @&quot;iPad4,4&quot;   :@&quot;iPad Mini&quot;,         // (2nd Generation iPad Mini - Wifi)</div><div class="line">                              @&quot;iPad4,5&quot;   :@&quot;iPad Mini&quot;,         // (2nd Generation iPad Mini - Cellular)</div><div class="line">                              @&quot;iPad4,7&quot;   :@&quot;iPad Mini&quot;,         // (3rd Generation iPad Mini - Wifi (model A1599))</div><div class="line">                              @&quot;iPad6,7&quot;   :@&quot;iPad Pro (12.9\&quot;)&quot;, // iPad Pro 12.9 inches - (model A1584)</div><div class="line">                              @&quot;iPad6,8&quot;   :@&quot;iPad Pro (12.9\&quot;)&quot;, // iPad Pro 12.9 inches - (model A1652)</div><div class="line">                              @&quot;iPad6,3&quot;   :@&quot;iPad Pro (9.7\&quot;)&quot;,  // iPad Pro 9.7 inches - (model A1673)</div><div class="line">                              @&quot;iPad6,4&quot;   :@&quot;iPad Pro (9.7\&quot;)&quot;   // iPad Pro 9.7 inches - (models A1674 and A1675)</div><div class="line">                              &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSString* deviceName = [deviceNamesByCode objectForKey:code];</div><div class="line">    </div><div class="line">    if (!deviceName) &#123;</div><div class="line">        // Not found on database. At least guess main device type from string contents:</div><div class="line">        </div><div class="line">        if ([code rangeOfString:@&quot;iPod&quot;].location != NSNotFound) &#123;</div><div class="line">            deviceName = @&quot;iPod Touch&quot;;</div><div class="line">        &#125;</div><div class="line">        else if([code rangeOfString:@&quot;iPad&quot;].location != NSNotFound) &#123;</div><div class="line">            deviceName = @&quot;iPad&quot;;</div><div class="line">        &#125;</div><div class="line">        else if([code rangeOfString:@&quot;iPhone&quot;].location != NSNotFound)&#123;</div><div class="line">            deviceName = @&quot;iPhone&quot;;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            deviceName = @&quot;Unknown&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    UIDevice *device = [UIDevice currentDevice];</div><div class="line">    NSString *systemVersion = [device systemVersion];</div><div class="line">    </div><div class="line">    return [NSString stringWithFormat:@&quot;iOS#%@#%@&quot;,deviceName,systemVersion];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取的信息：</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2016-12-16-081639.jpg" alt=""></p>
<p>原项目地址：</p>
<p><a href="https://github.com/yangqian111/blog/tree/master/iOS获取当前设备的信息-网络相关" target="_blank" rel="external">https://github.com/yangqian111/blog/tree/master/iOS获取当前设备的信息-网络相关</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在搞网络相关的SDK，将自己在项目中能够开放出来的，记录下来，其中很多用到了C，相当于一个工具。后期还会选择开放一些ping网络的工具，找链路节点的工具，最近就在搞这个。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS组件" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/"/>
    
      <category term="网络小工具" scheme="http://ppsheep.com/all-categories/iOS%E7%BB%84%E4%BB%B6/%E7%BD%91%E7%BB%9C%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="域名解析 网络判断" scheme="http://ppsheep.com/all-tags/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-%E7%BD%91%E7%BB%9C%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的并发编程</title>
    <link href="http://ppsheep.com/2016/12/14/iOS%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%80/"/>
    <id>http://ppsheep.com/2016/12/14/iOS中的并发编程-一/</id>
    <published>2016-12-14T07:09:03.000Z</published>
    <updated>2017-01-20T09:36:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>并发编程，这个我们听起来再熟悉不过了，我们在代码编写过程中也经常会做这样一些操作，但是我发现，在实际的编写过程中，很多实用并发编程的方式，其实是错误使用的，当然这也包括我自己，对一些并发编程也是糊里糊涂，今天的工作中涉及到了许多的并发方面的问题，专门抽时间去学习了一下，现在记录下来。</p>
<a id="more"></a>
<h3 id="OS-X和iOS中的并发编程"><a href="#OS-X和iOS中的并发编程" class="headerlink" title="OS X和iOS中的并发编程"></a>OS X和iOS中的并发编程</h3><p>在OS X和iOS中，Apple都为我们提供了相同的并发编程API。pthread 、 NSThread 、GCD 、NSOperationQueue。</p>
<h4 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h4><p>pthread是比较底层的并发API，这个用起来并不是那么容易，而且在我们日常的编码过程中，我们也应该抛弃掉这种效率极低的并发编程方式。这里就不对这种并发做过多详细的介绍。</p>
<h4 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h4><p>NSThread这个我们听起来就很熟悉了，实际上，这是Apple对pthread的一个封装，封装成了Objectivc-C的接口API，在cocoa环境中，我们能够轻易使用NSThread来进行并发编程。</p>
<p>例如我们现在有这样一个场景，需要计算100万个数字中的最大数和最小数，首先我们可以定义一个NSThread的子类，专门来进行这个运算。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@interface FindMinMaxThread : NSThread</div><div class="line">@property (nonatomic) NSUInteger min;</div><div class="line">@property (nonatomic) NSUInteger max;</div><div class="line">- (instancetype)initWithNumbers:(NSArray *)numbers;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation FindMinMaxThread &#123;</div><div class="line">    NSArray *_numbers;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithNumbers:(NSArray *)numbers</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        _numbers = numbers;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)main</div><div class="line">&#123;</div><div class="line">    NSUInteger min;</div><div class="line">    NSUInteger max;</div><div class="line">    // 进行相关数据的处理</div><div class="line">    self.min = min;</div><div class="line">    self.max = max;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>要想启动一个新的线程，需要创建一个线程对象，然后调用它的 start 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSMutableSet *threads = [NSMutableSet set];</div><div class="line">NSUInteger numberCount = self.numbers.count;</div><div class="line">NSUInteger threadCount = 4;</div><div class="line">for (NSUInteger i = 0; i &lt; threadCount; i++) &#123;</div><div class="line">    NSUInteger offset = (count / threadCount) * i;</div><div class="line">    NSUInteger count = MIN(numberCount - offset, numberCount / threadCount);</div><div class="line">    NSRange range = NSMakeRange(offset, count);</div><div class="line">    NSArray *subset = [self.numbers subarrayWithRange:range];</div><div class="line">    FindMinMaxThread *thread = [[FindMinMaxThread alloc] initWithNumbers:subset];</div><div class="line">    [threads addObject:thread];</div><div class="line">    [thread start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然，看起来这个多线程实现起来比较简单，但是呢，在实际的编码中，我们并不会采用这种方式来进行，并发编程。</p>
<p>这种方式，其实是我们自己来操作线程，进行并发编程，这样就涉及到一个问题，例如，我们在使用到AFNetworking 进行网络访问的时候，本身AF中已经对网络访问进行了异步的线程处理，如果我们在调用AF的时候，再次进行并发线程处理，那么我们使用NSThread这种方式进行并发编程的时候，就回造成线程的指数级增长，因为我们操作的都是单个的线程。开了这么多的线程，当然会造成内存和CPU的高度浪费，而且会造成其他的一些不必要的bug。</p>
<p>那正确的并发编程 的姿势 是什么，当然是  GCD 和 operation queue ——基于队列的并发编程。这两种方式，通过管理一个被大家协同使用的线程池，来解决上面的问题。</p>
<h4 id="Grand-Central-Dispatch-GCD"><a href="#Grand-Central-Dispatch-GCD" class="headerlink" title="Grand Central Dispatch(GCD)"></a>Grand Central Dispatch(GCD)</h4><p>通过 GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加代码块即可，GCD 在后端管理着一个线程池。GCD 不仅决定着你的代码块将在哪个线程被执行，它还根据可用的系统资源对这些线程进行管理。这样可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。</p>
<p>GCD 带来的另一个重要改变是，作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</p>
<p>GCD 公开有 5 个不同的队列：运行在主线程中的 main queue，3 个不同优先级的后台队列，以及一个优先级更低的后台队列（用于 I/O）。 另外，开发者可以创建自定义队列：串行或者并行队列。自定义队列非常强大，在自定义队列中被调度的所有 block 最终都将被放入到系统的全局队列中和线程池中。</p>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2016-12-14-gcd-queues.png" alt=""></p>
<p>使用不同优先级的若干个队列乍听起来非常直接，不过，我们强烈建议，在绝大多数情况下使用默认的优先级队列就可以了。如果执行的任务需要访问一些共享的资源，那么在不同优先级的队列中调度这些任务很快就会造成不可预期的行为。这样可能会引起程序的完全挂起，因为低优先级的任务阻塞了高优先级任务，使它不能被执行。</p>
<p><strong>稍后我们将详细介绍GCD的使用</strong></p>
<h4 id="Operation-Queues"><a href="#Operation-Queues" class="headerlink" title="Operation Queues"></a>Operation Queues</h4><p>操作队列是Apple在GCD之上，实现了一些更方便的功能，更高级的AP，这些功能对于开发者来讲通常来说，是最安全的最好的选择。</p>
<p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。</p>
<p>你可以通过重写 main 或者 start 方法 来定义自己的 operations 。前一种方法非常简单，开发者不需要管理一些状态属性（例如 isExecuting 和 isFinished），当 main 方法返回的时候，这个 operation 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 start 来说要少一些。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@implementation YourOperation</div><div class="line">    - (void)main</div><div class="line">    &#123;</div><div class="line">        // 进行处理 ...</div><div class="line">    &#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>如果你希望拥有更多的控制权，以及在一个操作中可以执行异步任务，那么就重写 start 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@implementation YourOperation</div><div class="line">    - (void)start</div><div class="line">    &#123;</div><div class="line">        self.isExecuting = YES;</div><div class="line">        self.isFinished = NO;</div><div class="line">        // 开始处理，在结束时应该调用 finished ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (void)finished</div><div class="line">    &#123;</div><div class="line">        self.isExecuting = NO;</div><div class="line">        self.isFinished = YES;</div><div class="line">    &#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>注意：这种情况下，你必须手动管理操作的状态。 为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 setter 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。</p>
<p>为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 isCancelled 属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)main</div><div class="line">&#123;</div><div class="line">    while (notDone &amp;&amp; !self.isCancelled) &#123;</div><div class="line">        // 进行处理</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当你定义好 operation 类之后，就可以很容易的将一个 operation 添加到队列中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">YourOperation *operation = [[YourOperation alloc] init];</div><div class="line">[queue  addOperation:operation];</div></pre></td></tr></table></figure>
<p>另外，你也可以将 block 添加到操作队列中。这有时候会非常的方便，比如你希望在主队列中调度一个一次性任务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</div><div class="line">    // 代码...</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>虽然通过这种的方式在队列中添加操作会非常方便，但是定义你自己的 NSOperation 子类会在调试时很有帮助。如果你重写 operation 的description 方法，就可以很容易的标示出在某个队列中当前被调度的所有操作 。</p>
<p>除了提供基本的调度操作或 block 外，操作队列还提供了在 GCD 中不太容易处理好的特性的功能。例如，你可以通过 maxConcurrentOperationCount 属性来控制一个特定队列中可以有多少个操作参与并发执行。将其设置为 1 的话，你将得到一个串行队列，这在以隔离为目的的时候会很有用。</p>
<p>另外还有一个方便的功能就是根据队列中 operation 的优先级对其进行排序，这不同于 GCD 的队列优先级，它只影响当前队列中所有被调度的 operation 的执行先后。如果你需要进一步在除了 5 个标准的优先级以外对 operation 的执行顺序进行控制的话，还可以在 operation 之间指定依赖关系，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[intermediateOperation addDependency:operation1];</div><div class="line">[intermediateOperation addDependency:operation2];</div><div class="line">[finishedOperation addDependency:intermediateOperation];</div></pre></td></tr></table></figure>
<p>这些简单的代码可以确保 operation1 和 operation2 在 intermediateOperation 之前执行，当然，也会在 finishOperation 之前被执行。对于需要明确的执行顺序时，操作依赖是非常强大的一个机制。它可以让你创建一些操作组，并确保这些操作组在依赖它们的操作被执行之前执行，或者在并发队列中以串行的方式执行操作。</p>
<p>从本质上来看，操作队列的性能比 GCD 要低那么一点，不过，大多数情况下这点负面影响可以忽略不计，操作队列是并发编程的首选工具。</p>
<p>参考：</p>
<p><a href="https://www.objccn.io/issue-2-1/" target="_blank" rel="external">https://www.objccn.io/issue-2-1/</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发编程，这个我们听起来再熟悉不过了，我们在代码编写过程中也经常会做这样一些操作，但是我发现，在实际的编写过程中，很多实用并发编程的方式，其实是错误使用的，当然这也包括我自己，对一些并发编程也是糊里糊涂，今天的工作中涉及到了许多的并发方面的问题，专门抽时间去学习了一下，现在记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS中的并发编程" scheme="http://ppsheep.com/all-categories/iOS%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS中的并发编程" scheme="http://ppsheep.com/all-tags/iOS%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>UITableViewController子控制器的使用方法</title>
    <link href="http://ppsheep.com/2016/12/14/UITableViewController%E5%AD%90%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://ppsheep.com/2016/12/14/UITableViewController子控制器的使用方法/</id>
    <published>2016-12-14T02:24:25.000Z</published>
    <updated>2017-02-15T04:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中  我们讲了通过整合tableview的代理，来达到代码复用，减少控制器代码量的效果，今天我们接着来讲另外的一些方法来减轻控制器代码量，整合封装，提高代码的可读性。</p>
<a id="more"></a>
<h3 id="UITableViewController的使用"><a href="#UITableViewController的使用" class="headerlink" title="UITableViewController的使用"></a>UITableViewController的使用</h3><p>TableView在iOS应用程序中是非常通用的组件，Apple为我们提供了tableview专属的view controller类UITableViewController。Table view controller实现了一些非常有用的特性，来避免一遍又一遍的写那些死板的代码！</p>
<p>但是，我们经常会遇到这样一个问题，table view controller 只限于管理一个全屏展示的table view。大多数情况下，我们想达到的效果就是这样，但是如果不是呢，我们就只能使用通常的控制器，其实还有其他的方法来达到使用table view controller 的目的。</p>
<h4 id="UITableViewController的特性"><a href="#UITableViewController的特性" class="headerlink" title="UITableViewController的特性"></a>UITableViewController的特性</h4><p>Table view controllers 会在第一次显示 table view 的时候帮你加载其数据。另外，它还会帮你切换 table view 的编辑模式、响应键盘通知、以及一些小任务，比如闪现侧边的滑动提示条和清除选中时的背景色。为了让这些特性生效，当你在子类中覆写类似 viewWillAppear: 或者 viewDidAppear: 等事件方法时，需要调用 super 版本。</p>
<p>Table view controllers 相对于标准 view controllers 的一个特别的好处是它支持 Apple 实现的“下拉刷新”。目前，文档中唯一的使用 UIRefreshControl 的方式就是通过 table view controller ，虽然通过努力在其他地方也能让它工作（例如直接将UIRefreshControl直接addSubView到tableview），但很可能在下一次 iOS 更新的时候就不行了。</p>
<p>这些要素加一起，为我们提供了大部分 Apple 所定义的标准 table view 交互行为，如果你的应用恰好符合这些标准，那么直接使用 table view controllers 来避免写那些死板的代码是个很好的方法。</p>
<h4 id="UITableViewController的限制"><a href="#UITableViewController的限制" class="headerlink" title="UITableViewController的限制"></a>UITableViewController的限制</h4><p>Table view controllers 的 view 属性永远都是一个 table view。如果你稍后决定在 table view 旁边显示一些东西（比如一个地图，一个小的按钮），如果不依赖于那些奇怪的 hacks，估计就没什么办法了。</p>
<p>如果你是用代码或 .xib 文件来定义的界面，那么迁移到一个标准 view controller 将会非常简单。但是如果你使用了 storyboards，那么这个过程要多包含几个步骤。除非重新创建，否则你并不能在 storyboards 中将 table view controller 改成一个标准的 view controller。这意味着你必须将所有内容拷贝到新的 view controller，然后再重新连接一遍。</p>
<p>最后，你需要把迁移后丢失的 table view controller 的特性给补回来。大多数都是 viewWillAppear: 或 viewDidAppear: 中简单的一条语句。切换编辑模式需要实现一个 action 方法，用来切换 table view 的 editing 属性。大多数工作来自重新创建对键盘的支持。</p>
<p>在选择这条路之前，其实还有一个更轻松的选择，它可以通过分离我们需要关心的功能（关注点分离），让你获得额外的好处：</p>
<h4 id="使用-Child-View-Controllers"><a href="#使用-Child-View-Controllers" class="headerlink" title="使用 Child View Controllers"></a>使用 Child View Controllers</h4><p>和完全抛弃 table view controller 不同，你还可以将它作为 child view controller 添加到其他 view controller 中。这样，parent view controller 在管理其他的你需要的新加的界面元素的同时，table view controller 还可以继续管理它的 table view。</p>
<p>我们来看代码：</p>
<p>我有一个UITableViewController</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@interface MyTableViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation MyTableViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    [self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@&quot;cell&quot;];</div><div class="line">    self.refreshControl = [[UIRefreshControl alloc] initWithFrame:CGRectMake(0, 0, 20, 20)];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)didReceiveMemoryWarning &#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Table view data source</div><div class="line"></div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line"></div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line"></div><div class="line">    return 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot; forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    cell.textLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,(long)indexPath.row];</div><div class="line">    </div><div class="line">    return cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我想要使用这个UITableViewController来管理我的tableview</p>
<p>然后  我还有一个view controller，在这个view controller中  我既要包含这个table view  还要有其他的view  用上面的加自controller来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    [self addMyTableViewController];</div><div class="line">    [self addOtherView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//添加zicontroller</div><div class="line">- (void)addMyTableViewController&#123;</div><div class="line">    MyTableViewController *vc = [[MyTableViewController alloc] init];</div><div class="line">    [self addChildViewController:vc];</div><div class="line">    CGRect frame = self.view.bounds;</div><div class="line">    frame.size.height = 300;</div><div class="line">    vc.view.frame = frame;</div><div class="line">    [self.view addSubview:vc.view];</div><div class="line">    [vc didMoveToParentViewController:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)addOtherView&#123;</div><div class="line">    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(20, 400, 100, 30)];</div><div class="line">    btn.backgroundColor = [UIColor redColor];</div><div class="line">    [self.view addSubview:btn];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)didReceiveMemoryWarning &#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://o8bxt3lx0.bkt.clouddn.com/blog/2016-12-14-032856.jpg" alt=""></p>
<p>如果我们使用了这种方法，那么我们就需要在子controller 和 父 controller之间建立起通信渠道，因为，如果点击了cell，在父类中我需要知道，虽然这样看起来是额外的开销，但是我们的代码变得非常清晰，复用性也更高</p>
<p>我们怎样建立起通信呢，当然最简单的就是使用delegate，这个就比较简单的了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@protocol MyTableViewControllerDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)didSelectCell;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@interface MyTableViewController : UITableViewController</div><div class="line"></div><div class="line">@property (nonatomic, weak) id&lt;MyTableViewControllerDelegate&gt; delegate;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>传递点击事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];</div><div class="line">    if ([self.delegate respondsToSelector:@selector(didSelectCell)]) &#123;</div><div class="line">        [self.delegate didSelectCell];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在父controller中捕获点击事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyTableViewController *vc = [[MyTableViewController alloc] init];</div><div class="line">vc.delegate = self;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(void)didSelectCell&#123;</div><div class="line">    NSLog(@&quot;点击&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在cell内部控制cell的状态"><a href="#在cell内部控制cell的状态" class="headerlink" title="在cell内部控制cell的状态"></a>在cell内部控制cell的状态</h3><p>如果我们想自定义cell内部的状态，在点击cell的时候  自定义高亮样式 我们知道有这样的delegate方法，让我们在view controller中操作，但是我们要讲的就是减少view controller的代码</p>
<p>首先我们来看看在view controller 中 怎样来改变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView</div><div class="line">        didHighlightRowAtIndexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">   //高亮时</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)tableView:(UITableView *)tableView</div><div class="line">        didUnhighlightRowAtIndexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">    //非高亮</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View 的实现细节和 delegate 的实现交织在一起了。我们应该把这些细节移到 cell 自身中去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated&#123;</div><div class="line">    [super setHighlighted:highlighted animated:animated];</div><div class="line">    if (highlighted) &#123;</div><div class="line">        //高亮时改变cell的状态</div><div class="line">    &#125;else&#123;</div><div class="line">        //非高亮时改变</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Table view controllers（以及其他的 controller 对象！）应该在 model 和 view 对象之间扮演协调者和调解者的角色。它不应该关心明显属于 view 层或 model 层的任务。你应该始终记住这点，这样 delegate 和 data source 方法会变得更小巧，最多包含一些简单的样板代码。</p>
<p>这不仅减少了 table view controllers 那样的大小和复杂性，而且还把业务逻辑和 view 的逻辑放到了更合适的地方。Controller 层的里里外外的实现细节都被封装成了简单的 API，最终，它变得更加容易理解，也更利于团队协作。</p>
<p>参考:</p>
<p><a href="https://www.objccn.io/issue-1-2/" target="_blank" rel="external">https://www.objccn.io/issue-1-2/</a></p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章中  我们讲了通过整合tableview的代理，来达到代码复用，减少控制器代码量的效果，今天我们接着来讲另外的一些方法来减轻控制器代码量，整合封装，提高代码的可读性。&lt;/p&gt;
    
    </summary>
    
      <category term="ViewController" scheme="http://ppsheep.com/all-categories/ViewController/"/>
    
    
      <category term="ViewController" scheme="http://ppsheep.com/all-tags/ViewController/"/>
    
  </entry>
  
  <entry>
    <title>Runtime简单应用</title>
    <link href="http://ppsheep.com/2016/12/10/Runtime%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <id>http://ppsheep.com/2016/12/10/Runtime简单应用/</id>
    <published>2016-12-10T02:48:34.000Z</published>
    <updated>2017-02-16T06:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇文章，我们讲解了Runtime的一些基础知识，接下来，我会讲一些怎么来运用这种Runtime机制，用到实际的编码中，有哪些情况下，我们需要用到这种机制</p>
<a id="more"></a>
<h3 id="关联对象的应用"><a href="#关联对象的应用" class="headerlink" title="关联对象的应用"></a>关联对象的应用</h3><p>一般的，我们都在类声明中添加属性，但是出于某种原因，我们需要在分类中添加属性，但是分类中只能添加方法，不能添加属性，这时候我们Runtime就起到关键性作用了</p>
<p>Runtime提供了三个方法来设置关联对象</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置关联对象 </span></div><div class="line">OBJC_EXPORT <span class="keyword">void</span> objc_setAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key, <span class="keyword">id</span> value, objc_AssociationPolicy policy)</div><div class="line">    OBJC_AVAILABLE(<span class="number">10.6</span>, <span class="number">3.1</span>, <span class="number">9.0</span>, <span class="number">1.0</span>);</div><div class="line"><span class="comment">//获取关联对象</span></div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key)</div><div class="line">    OBJC_AVAILABLE(<span class="number">10.6</span>, <span class="number">3.1</span>, <span class="number">9.0</span>, <span class="number">1.0</span>);</div><div class="line"><span class="comment">//移除关联对象</span></div><div class="line">OBJC_EXPORT <span class="keyword">void</span> objc_removeAssociatedObjects(<span class="keyword">id</span> object)</div><div class="line">    OBJC_AVAILABLE(<span class="number">10.6</span>, <span class="number">3.1</span>, <span class="number">9.0</span>, <span class="number">1.0</span>);</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">//参数解释</span></div><div class="line"><span class="keyword">id</span> object 被关联的对象</div><div class="line"><span class="keyword">const</span> <span class="keyword">void</span> *key 关联的key 必须唯一</div><div class="line"><span class="keyword">id</span> value 关联的对象</div><div class="line">objc_AssociationPolicy policy 关联策略</div><div class="line"></div><div class="line"><span class="comment">//其中的关联策略就相当于我们的property中的copy assign之类的</span></div><div class="line">OBJC_ASSOCIATION_ASSIGN = <span class="number">0</span>,           <span class="comment">/**&lt; Specifies a weak reference to the associated object. */</span></div><div class="line">OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class="number">1</span>, <span class="comment">/**&lt; Specifies a strong reference to the associated object. </span></div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">OBJC_ASSOCIATION_COPY_NONATOMIC = <span class="number">3</span>,   <span class="comment">/**&lt; Specifies that the associated object is copied. </span></div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">OBJC_ASSOCIATION_RETAIN = <span class="number">01401</span>,       <span class="comment">/**&lt; Specifies a strong reference to the associated object.</span></div><div class="line">                                            *   The association is made atomically. */</div><div class="line">OBJC_ASSOCIATION_COPY = <span class="number">01403</span>          <span class="comment">/**&lt; Specifies that the associated object is copied.</span></div><div class="line">                                            *   The association is made atomically. */</div></pre></td></tr></table></figure>
<h6 id="添加公共属性"><a href="#添加公共属性" class="headerlink" title="添加公共属性"></a>添加公共属性</h6><p>两种解决办法：</p>
<ol>
<li>继承NSArray，在子类中添加一个属性</li>
<li>使用分类，利用Runtime实现添加属性</li>
</ol>
<p>我们举例第二种：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">PPS</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *myString;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"NSArray+PPS.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> * <span class="keyword">const</span> MY_STRING = <span class="string">"my_string"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">PPS</span>)</span></div><div class="line"></div><div class="line">-(<span class="built_in">NSString</span> *)myString&#123;</div><div class="line">    <span class="keyword">id</span> myString = objc_getAssociatedObject(<span class="keyword">self</span>, MY_STRING);</div><div class="line">    <span class="keyword">return</span> myString;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setMyString:(<span class="built_in">NSString</span> *)myString&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, MY_STRING, myString, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样，我们可以直接用点语法，对属性直接操作</p>
<h5 id="添加私有成员变量"><a href="#添加私有成员变量" class="headerlink" title="添加私有成员变量"></a>添加私有成员变量</h5><p>给按钮添加点击事件的回调，不用addtarget的方式</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span> (<span class="title">PPS</span>)</span></div><div class="line"><span class="comment">//传入点击事件的回调</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame callback:(<span class="keyword">void</span> (^)(<span class="built_in">UIButton</span> *button))callbackBlock;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIButton+PPS.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> * <span class="built_in">CALLBACK_BLOCK_IDENTIFER</span> = <span class="string">"CALLBACK_BLOCK_IDENTIFER"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span>()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^callbackBlock)(<span class="built_in">UIButton</span> * button);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIButton</span> (<span class="title">PPS</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span> (^)(<span class="built_in">UIButton</span> *))callbackBlock &#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="built_in">CALLBACK_BLOCK_IDENTIFER</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setCallbackBlock:(<span class="keyword">void</span> (^)(<span class="built_in">UIButton</span> *))callbackBlock &#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="built_in">CALLBACK_BLOCK_IDENTIFER</span>, callbackBlock, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame callback:(<span class="keyword">void</span> (^)(<span class="built_in">UIButton</span> *))callbackBlock &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame]) &#123;</div><div class="line">        <span class="keyword">self</span>.callbackBlock = callbackBlock;</div><div class="line">        [<span class="keyword">self</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(didClickAction:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didClickAction:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">    <span class="comment">//想想这里为什么需要使用weak一下</span></div><div class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">    weakSelf.callbackBlock(button);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们在初始化button的时候,可以直接处理点击事件</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.btn = [[<span class="built_in">UIButton</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>) callback:^(<span class="built_in">UIButton</span> *button) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击事件"</span>);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<h3 id="成员变量和属性"><a href="#成员变量和属性" class="headerlink" title="成员变量和属性"></a>成员变量和属性</h3><p>这个的使用，运用最广泛的还是在json和model的转换，我们可以通过Runtime机制，将model中的所有成员属性都找出来，然后将这些成员属性的名称和返回的json字典中对比，查看有哪些匹配，然后纷纷赋值进去</p>
<h6 id="json转model"><a href="#json转model" class="headerlink" title="json转model"></a>json转model</h6><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithDict:(<span class="built_in">NSDictionary</span> *)dict &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">self</span> init]) &#123;</div><div class="line">        <span class="comment">//(1)获取类的属性及属性对应的类型</span></div><div class="line">        <span class="built_in">NSMutableArray</span> * keys = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        <span class="built_in">NSMutableArray</span> * attributes = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 例子</div><div class="line">         * name = value3 attribute = T@"NSString",C,N,V_value3</div><div class="line">         * name = value4 attribute = T^i,N,V_value4</div><div class="line">         */</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</div><div class="line">        objc_property_t * properties = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</div><div class="line">            objc_property_t property = properties[i];</div><div class="line">            <span class="comment">//通过property_getName函数获得属性的名字</span></div><div class="line">            <span class="built_in">NSString</span> * propertyName = [<span class="built_in">NSString</span> stringWithCString:property_getName(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">            [keys addObject:propertyName];</div><div class="line">            <span class="comment">//通过property_getAttributes函数可以获得属性的名字和@encode编码</span></div><div class="line">            <span class="built_in">NSString</span> * propertyAttribute = [<span class="built_in">NSString</span> stringWithCString:property_getAttributes(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">            [attributes addObject:propertyAttribute];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//立即释放properties指向的内存</span></div><div class="line">        free(properties);</div><div class="line"></div><div class="line">        <span class="comment">//(2)根据类型给属性赋值</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> * key <span class="keyword">in</span> keys) &#123;</div><div class="line">            <span class="keyword">if</span> ([dict valueForKey:key] == <span class="literal">nil</span>) <span class="keyword">continue</span>;</div><div class="line">            [<span class="keyword">self</span> setValue:[dict valueForKey:key] forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然这上面只是最简单的转换，其中还有很多问题待解决</p>
<p>如何识别int等基础类型数据<br>如何处理nil和Null<br>json嵌套如何处理</p>
<h5 id="访问私有变量"><a href="#访问私有变量" class="headerlink" title="访问私有变量"></a>访问私有变量</h5><p>我们知道，如果成员变量放在了m文件中，就成了私有变量，但是我们依然可以通过Runtime获取，这时候，我们就需要知道成员变量的名称了</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Ivar ivar = class_getInstanceVariable([Model <span class="keyword">class</span>], <span class="string">"_str1"</span>);</div><div class="line"><span class="built_in">NSString</span> * str1 = object_getIvar(model, ivar);</div></pre></td></tr></table></figure>
<p>OC没有绝对的私有变量和方法，方法当然也可以这样获取出来</p>
<p>抛砖引玉，到此。。。</p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的一篇文章，我们讲解了Runtime的一些基础知识，接下来，我会讲一些怎么来运用这种Runtime机制，用到实际的编码中，有哪些情况下，我们需要用到这种机制&lt;/p&gt;
    
    </summary>
    
      <category term="Runtime" scheme="http://ppsheep.com/all-categories/Runtime/"/>
    
    
      <category term="Runtime" scheme="http://ppsheep.com/all-tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>分离UITableView数据源和协议</title>
    <link href="http://ppsheep.com/2016/12/05/%E5%88%86%E7%A6%BBUITableView%E6%95%B0%E6%8D%AE%E6%BA%90%E5%92%8C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://ppsheep.com/2016/12/05/分离UITableView数据源和协议/</id>
    <published>2016-12-05T14:29:37.000Z</published>
    <updated>2017-02-15T04:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>View controllers 通常是 iOS 项目中最大的文件，并且它们包含了许多不必要的代码。所以 View controllers 中的代码几乎总是复用率最低的。接下来我将结合一些我自己看到的东西和平时在使用的方法，来节省ViewController中的代码量。</p>
<a id="more"></a>
<h3 id="把-Data-Source-和其他-Protocols-分离出来"><a href="#把-Data-Source-和其他-Protocols-分离出来" class="headerlink" title="把 Data Source 和其他 Protocols 分离出来"></a>把 Data Source 和其他 Protocols 分离出来</h3><p>我们在平时的编码中，最经常使用到的一个控件就是UITableView了，那我们每次需要使用到tableview的时候，都需要写一些重复的代码，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#pragma mark - tableview datasource</div><div class="line"></div><div class="line">#pragma mark - tableview datasource</div><div class="line"></div><div class="line">- (PPSFriend *)friendAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    return self.friends[indexPath.row];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</div><div class="line">    return self.friends.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    PPSFriendCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;friendCell&quot; forIndexPath:indexPath];</div><div class="line">    PPSFriend *friend = [self friendAtIndexPath:indexPath];</div><div class="line">    cell.textLabel.text = friend.name;</div><div class="line">    return cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像上面一些代码，我们每天都在写，每次用到UITableView都需要重写这些毫无技术可言的代码，那我们试想一下能否写一个封装类，将这些重复的方法全部封起来，多次使用呢？答案当然是，可以的。</p>
<p>上面的代码，其实都是在围绕着friends这个数组做一系列的事情，我们可以独立出来一个类，使用一个block或者delegate来设置cell，当然这取决于你的习惯。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#pragma mark - tableview config cell</div><div class="line">- (void)configCell&#123;</div><div class="line">    void (^configCell)(PPSFriendCell *, PPSFriend *) = ^(PPSFriendCell *cell, PPSFriend *friend)&#123;</div><div class="line">        cell.textLabel.text = friend.name;</div><div class="line">    &#125;;</div><div class="line">    PPSArrayDatasource *datasources = [[PPSArrayDatasource alloc] initWithItems:self.friends cellIdentifier:@&quot;friendCell&quot; configureCellBlock:configCell];</div><div class="line">    self.tableView.dataSource = datasources;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，你可以把 view controller 中的这 3 个方法去掉了，取而代之，你可以创建一个 PPSArrayDatasource 类的实例作为 table view 的 data source。</p>
<p>现在你不用担心把一个 index path 映射到数组中的位置了，每次你想把这个数组显示到一个 table view 中时，你都可以复用这些代码。你也可以实现一些额外的方法，比如 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tableView:commitEditingStyle:forRowAtIndexPath:</div></pre></td></tr></table></figure>
<h4 id="多个section"><a href="#多个section" class="headerlink" title="多个section"></a>多个section</h4><p>还有一种情况，如果是多个section的情况下，我们还可以再扩展一下，将block定义为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef void(^TableViewCellConfigureBlock)(id cell, id item, NSIndexPath *indexPath);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#pragma mark - tableview config cell</div><div class="line">- (void)configCell&#123;</div><div class="line">    void (^configCell)(PPSFriendCell *, PPSFriend *, NSIndexPath *) = ^(PPSFriendCell *cell, PPSFriend *friend, NSIndexPath *indexPath)&#123;</div><div class="line">        cell.textLabel.text = friend.name;</div><div class="line">    &#125;;</div><div class="line">    PPSArrayDatasource *datasources = [[PPSArrayDatasource alloc] initWithItems:self.friends cellIdentifier:@&quot;friendCell&quot; configureCellBlock:configCell];</div><div class="line">    self.tableView.dataSource = datasources;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么在PPSArrayDatasource的items中装的应该就是一个一个的数组了，分别对应的每个section，这里我只是针对这种情况说明一下，不管是多个section还是单个section都可以使用这种方法，来瘦身</p>
<p>在 table view controllers 之间共享。</p>
<p>这样的好处在于，你可以单独测试这个类，再也不用写第二遍。该原则同样适用于数组之外的其他对象。</p>
<h3 id="将业务逻辑移到model中"><a href="#将业务逻辑移到model中" class="headerlink" title="将业务逻辑移到model中"></a>将业务逻辑移到model中</h3><p>下面是在viewcontroller中写的用来查找一个用户的目前的优先事项的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)loadPriorities &#123;</div><div class="line">    NSDate* now = [NSDate date];</div><div class="line">    NSString* formatString = @&quot;startDate = %@&quot;;</div><div class="line">    NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];</div><div class="line">    NSSet* priorities = [self.user.priorities filteredSetUsingPredicate:predicate];</div><div class="line">    self.priorities = [priorities allObjects];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把这些代码移动到 User 类的 category 中会变得更加清晰，处理之后，在 View Controller.m 中看起来就是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)loadPriorities &#123;</div><div class="line">    self.priorities = [user currentPriorities];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 User+Extensions.m 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSArray*)currentPriorities &#123;</div><div class="line">    NSDate* now = [NSDate date];</div><div class="line">    NSString* formatString = @&quot;startDate = %@&quot;;</div><div class="line">    NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];</div><div class="line">    return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有些代码不能被轻松地移动到 model 对象中，但明显和 model 代码紧密联系，对于这种情况，我们可以使用一个 Store：</p>
<h3 id="创建store类"><a href="#创建store类" class="headerlink" title="创建store类"></a>创建store类</h3><p>在一些情况下中，我们需要加载文件并解析它。下面就是 view controller 中的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)readArchive &#123;</div><div class="line">    NSBundle* bundle = [NSBundle bundleForClass:[self class]];</div><div class="line">    NSURL *archiveURL = [bundle URLForResource:@&quot;photodata&quot;</div><div class="line">                                 withExtension:@&quot;bin&quot;];</div><div class="line">    NSAssert(archiveURL != nil, @&quot;Unable to find archive in bundle.&quot;);</div><div class="line">    NSData *data = [NSData dataWithContentsOfURL:archiveURL</div><div class="line">                                         options:0</div><div class="line">                                           error:NULL];</div><div class="line">    NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];</div><div class="line">    _users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;users&quot;];</div><div class="line">    _photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;photos&quot;];</div><div class="line">    [unarchiver finishDecoding];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是 view controller 没必要知道这些，所以我们可以创建了一个 Store 对象来做这些事。通过分离，我们就可以复用这些代码，单独测试他们，并且让 view controller 保持小巧。Store 对象会关心数据加载、缓存和设置数据栈。它也经常被称为服务层或者仓库。</p>
<h3 id="把网络层请求逻辑移到model层"><a href="#把网络层请求逻辑移到model层" class="headerlink" title="把网络层请求逻辑移到model层"></a>把网络层请求逻辑移到model层</h3><p>和上面的主题相似：不要在 view controller 中做网络请求的逻辑。取而代之，你应该将它们封装到另一个类中。这样，你的 view controller 就可以在之后通过使用回调（比如一个 completion 的 block）来请求网络了。这样的好处是，缓存和错误控制也可以在这个类里面完成。</p>
<h3 id="把View移到View层"><a href="#把View移到View层" class="headerlink" title="把View移到View层"></a>把View移到View层</h3><p>不应该在 view controller 中构建复杂的 view 层次结构。你可以使用 Interface Builder 或者把 views 封装到一个 UIView 子类当中。例如，如果你要创建一个选择日期的控件，把它放到一个名为 DatePickerView 的类中会比把所有的事情都在 view controller 中做好好得多。再一次，这样增加了可复用性并保持了简单。</p>
<p>简单来说，就是将一个viewcontroller中复杂的view构造，放到一个单独的view类中，然在viewcontroller中，只需要构建一个这个类就行。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们已经看到一些用来创建更小巧的 view controllers 的技术。我们并不是想把这些技术应用到每一个可能的角落，只是我们有一个目标：写可维护的代码。知道这些模式后，我们就更有可能把那些笨重的 view controllers 变得更整洁。</p>
<p><strong>欢迎大家关注我的公众号，我会定期分享一些我在项目中遇到问题的解决办法和一些iOS实用的技巧，现阶段主要是整理出一些基础的知识记录下来</strong></p>
<div align="middle"><br>    <image src="http://ac-mhke0kuv.clouddn.com/830a4ead8294ceff5160.jpg"></image><br></div>

<p>文章也会同步更新到我的博客：<br><a href="http://ppsheep.com">http://ppsheep.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;View controllers 通常是 iOS 项目中最大的文件，并且它们包含了许多不必要的代码。所以 View controllers 中的代码几乎总是复用率最低的。接下来我将结合一些我自己看到的东西和平时在使用的方法，来节省ViewController中的代码量。&lt;/p&gt;
    
    </summary>
    
      <category term="ViewController" scheme="http://ppsheep.com/all-categories/ViewController/"/>
    
    
      <category term="ViewController" scheme="http://ppsheep.com/all-tags/ViewController/"/>
    
  </entry>
  
  <entry>
    <title>Swift谈一谈</title>
    <link href="http://ppsheep.com/2016/10/28/swift%E8%B0%88%E4%B8%80%E8%B0%88/"/>
    <id>http://ppsheep.com/2016/10/28/swift谈一谈/</id>
    <published>2016-10-28T03:48:07.000Z</published>
    <updated>2017-02-15T05:15:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 3发布已经有一段时间了，如果已经有同学在使用Swift，那么从2.3迁移到3.0，我想肯定是极其痛苦的，在ABI稳定性方面，2.x和3.0相比，有较大的改动。不过，苹果官方宣布，在将来的Swift 3到Swift 4，会保持ABI稳定，那么也就是意味着，Swift的ABI相对稳定了，那此时是否就是正式投入Swift的时间了，其实呢，这个还是看自己。 在我自己的平时工作中，主要还是使用的OC，因为毕竟需要合作，不能说你用，大家都要跟着你用，不过这也是一个大的趋势，使用Swift的开发者越来越多，称赞Swift的开发者也是越来越多，那我自己内心也是想开搞的，虽说不会及时使用到工作中，自己玩玩也是可以的。其实现在开始已经相对较晚了。</p>
<a id="more"></a>
<h3 id="我对Swift的"><a href="#我对Swift的" class="headerlink" title="我对Swift的"></a>我对Swift的</h3><p>Swift 我一直在尝试，但是却因为工作上，没有将它考虑在内，所以一直都停止在尝试。结合到我现在的工作环境，我觉得在将来很长的一段时间内，它还是不会加入到我的工作中来，但是我在想，我需要改变我对他的态度的。如果不作出改变的话，我将一直停留在  只知道他的拼写而已，其他的一无所知。</p>
<p>在Swift 3发布之时，苹果宣布，将在2017年春节之时发布3.x , 4.0也将在2017年秋季发布，我们看到了苹果对于Swift所作出的努力，那我们作为开发者，是否也应该作出一些努力。</p>
<h3 id="我对Swift的学习规划"><a href="#我对Swift的学习规划" class="headerlink" title="我对Swift的学习规划"></a>我对Swift的学习规划</h3><p>之前我大致浏览过swift2.0 官方教程的  中译版<br><a href="http://www.swiftguide.cn" target="_blank" rel="external">http://www.swiftguide.cn</a></p>
<p>至于我还记得多少，嘿嘿嘿。。。你猜。。。</p>
<p>所以我打算呢，还是再过一遍官方的教程，这次呢，我不打算看中译版了，我还是去iBook上看原版吧。顺便提一句，现在国内iBook已经不可用了，你需要上美国的商店，才能找到官方的教程，这个嘛，可以申请一个美国的账号咯，至于方法，Google一下，或者 国内某大型搜索引擎网站，搜索一下。不过好像之前我有同事去搜过，好像现在不行了，一定要求绑定支付方式，最后他一怒之下，某宝了一个，哈哈哈哈，笑死我了。。。</p>
<p>如果你们有需要，可以联系我，我直接发你们一份，我就不直接放上来了。。。我的联系方式，我放了微信上来的，我记得，在关于我里面。</p>
<h3 id="Swift-你来吗？"><a href="#Swift-你来吗？" class="headerlink" title="Swift 你来吗？"></a>Swift 你来吗？</h3><p>后面我也将会把我的学习过程放到博客上来，你要一起来吗? 对了，我还在Objc中国上面买了几本Swift的书，那些书可真是不错，为什么说不错，因为我现在看不懂，看不懂，我就觉得他们写的很好，要是我现在就看得懂，那还学个屁！！！建议呢，这些书，可以在看完官方教程后，再来阅读，喵神维护的网站，还是很不错的，上面还有很多之前从objc.io翻译过来的博客，质量都很高的，有时间也可以阅读。</p>
<h3 id="关于之前博客停更的说明"><a href="#关于之前博客停更的说明" class="headerlink" title="关于之前博客停更的说明"></a>关于之前博客停更的说明</h3><p>最近几周，博客更新都很慢，主要原因呢，是要赶两个SDK，说来话长，某一天，我的领导不想跟我讲话，并向我扔出了2个SDK，然后我就傻逼了，并且还甩出了多少天拿出来，这样的话，期间呢，还到广州出差了一周，是的，你没听错，我，一个程序员，也出差了！！！我是昨天刚回到杭州，在出差期间呢，也是能挤出一点时间来更新一下，但是呢，你知道吗？广州的茶点心，真是不错，剩余时间，全部拿出来，去吃了，真是不好意思，可惜没有怎么拍照片，下次去了，一定拍几张照片发上来。</p>
<p>废话讲完了，一不小心，打了这么多字！！！！尴尬</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 3发布已经有一段时间了，如果已经有同学在使用Swift，那么从2.3迁移到3.0，我想肯定是极其痛苦的，在ABI稳定性方面，2.x和3.0相比，有较大的改动。不过，苹果官方宣布，在将来的Swift 3到Swift 4，会保持ABI稳定，那么也就是意味着，Swift的ABI相对稳定了，那此时是否就是正式投入Swift的时间了，其实呢，这个还是看自己。 在我自己的平时工作中，主要还是使用的OC，因为毕竟需要合作，不能说你用，大家都要跟着你用，不过这也是一个大的趋势，使用Swift的开发者越来越多，称赞Swift的开发者也是越来越多，那我自己内心也是想开搞的，虽说不会及时使用到工作中，自己玩玩也是可以的。其实现在开始已经相对较晚了。&lt;/p&gt;
    
    </summary>
    
      <category term="扯淡" scheme="http://ppsheep.com/all-categories/%E6%89%AF%E6%B7%A1/"/>
    
    
      <category term="扯淡" scheme="http://ppsheep.com/all-tags/%E6%89%AF%E6%B7%A1/"/>
    
  </entry>
  
</feed>
